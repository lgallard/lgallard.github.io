<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="es"><generator uri="https://jekyllrb.com/" version="3.6.0">Jekyll</generator><link href="https://lgallardo.com/es/feed.xml" rel="self" type="application/atom+xml" /><link href="https://lgallardo.com/es/" rel="alternate" type="text/html" hreflang="es" /><updated>2019-06-26T15:51:20-05:00</updated><id>https://lgallardo.com/es/</id><title type="html">lgallardo.com</title><subtitle></subtitle><author><name>Luis M. Gallardo D.</name></author><entry><title type="html">Cómo migrar tfstates remotos en Terraform</title><link href="https://lgallardo.com/es/2019/06/25/how-to-migrate-terraform-remote-tfstates/" rel="alternate" type="text/html" title="Cómo migrar tfstates remotos en Terraform" /><published>2019-06-24T19:00:00-05:00</published><updated>2019-06-24T19:00:00-05:00</updated><id>https://lgallardo.com/es/2019/06/25/how-to-migrate-terraform-remote-tfstates</id><content type="html" xml:base="https://lgallardo.com/es/2019/06/25/how-to-migrate-terraform-remote-tfstates/">&lt;center&gt;&lt;img src=&quot;/images/terraform-remote-states.jpg&quot; alt=&quot;Terraform&quot; /&gt;&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;En Terraform uno tiene la posibilidad de renombrar y mover recursos y módulos en un mismo tfstate tanto si es local como remoto. Pero cuando se quiere migrar de recursos o módulos entre tftstates remotos hay que tomar otras consideraciones.&lt;/p&gt;

&lt;p&gt;Para resolver esto lo que se tiene que hacer es traerse la configuración remota, luego mover el recurso de forma local, y una vez que se haya movido, subir el cambio al tftstate remoto.&lt;/p&gt;

&lt;p&gt;Veamos el procedimiento:&lt;/p&gt;

&lt;p&gt;1) Traerse el tfstate remoto de destino:
  &lt;/p&gt;

&lt;p&gt;Para mover los recursos de un tfstate a otro se necesita tener de forma local el tfstate destino:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ terraform state pull &amp;gt; dev.tfstate
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;2) Mover el recurso o módulo a este tfstate local&lt;/p&gt;

&lt;p&gt;En este ejemplo se desea mover el recurso &lt;code class=&quot;highlighter-rouge&quot;&gt;module.lambda.module.your_funtion&lt;/code&gt; a &lt;code class=&quot;highlighter-rouge&quot;&gt;module.your_function&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ terraform state mv -state-out=dev.tfstate module.lambda.module.your_function module.your_function
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;3) Subir el cambio al tftstate remoto&lt;/p&gt;

&lt;p&gt;El recurso se movió de un estado a otro, pero se hizo de forma local. Para que quede en el tftstate remoto de destino se debe subir:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ terraform state push dev.tfstate
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;En algunos casos puede requerirse el uso de la opción &lt;code class=&quot;highlighter-rouge&quot;&gt;-force&lt;/code&gt;, por ejemplo cuando se tuvo problemas con la inicialización del módulo , por lo que la orden anterior quedaría de la siguiente manera:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ terraform state push -force dev.tfstate
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Por último, y una vez que haya comprobado que todo está correctamente, puede borrar el tftstate local:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ rm dev.tfstate*
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;referencias&quot;&gt;Referencias:&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/@lynnlin827/moving-terraform-resources-states-from-one-remote-state-to-another-c76f8b76a996&quot; target=&quot;_blank&quot;&gt;Moving Terraform Resources’ States from One Remote State to Another&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/50400007/terraform-how-to-migrate-state-between-projects&quot; target=&quot;_blank&quot;&gt;Terraform: How to migrate state between projects?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Luis Gallardo</name></author><category term="AWS" /><category term="Terraform" /><summary type="html"></summary></entry><entry><title type="html">Bloques dinámicos en Terraform 0.12.x</title><link href="https://lgallardo.com/es/2019/06/14/dynamic-blocks-in-terraform-0.12.x/" rel="alternate" type="text/html" title="Bloques dinámicos en Terraform 0.12.x" /><published>2019-06-13T19:00:00-05:00</published><updated>2019-06-13T19:00:00-05:00</updated><id>https://lgallardo.com/es/2019/06/14/dynamic-blocks-in-terraform-0.12.x</id><content type="html" xml:base="https://lgallardo.com/es/2019/06/14/dynamic-blocks-in-terraform-0.12.x/">&lt;center&gt;&lt;img src=&quot;/images/terraform.jpg&quot; alt=&quot;Terraform&quot; /&gt;&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Hace un tiempo escribí sobre &lt;a href=&quot;https://lgallardo.com/2018/07/30/dynamic-configuration-blocks-in-terraform&quot; target=&quot;_blank&quot;&gt;cómo hacer bloques dinámicos en Terraform 0.11.x&lt;/a&gt;, que si bien resolvía el problema generaba otros debido a que era no era una solución oficial.&lt;/p&gt;

&lt;p&gt;En esencia lo que hacía era definir los bloques de forma dinámica usando una asiganción a una lista de maps. Es decir, en vez de hacer esto:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;resource &quot;aws_codebuild_project&quot; &quot;codebuild&quot; {

[...]

  artifacts{
      type           = &quot;${var.codebuild_artifacts_type}&quot;
      location       = &quot;${var.codebuild_artifacts_location}&quot;
      name           = &quot;${var.codebuild_artifacts_name}&quot;
      namespace_type = &quot;${var.codebuild_artifacts_namespace_type}&quot;
      packaging      = &quot;${var.codebuild_artifacts_packaging}&quot;
      path           = &quot;${var.codebuild_artifacts_path}&quot;

  }
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Se sustituía por:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;resource &quot;aws_codebuild_project&quot; &quot;codebuild&quot; {

[...]

  artifacts = [&quot;${local.codebuild_artifacts}&quot;]

}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Donde &lt;code class=&quot;highlighter-rouge&quot;&gt;local.codebuild_artifacts&lt;/code&gt; se construida a partir de una lista de maps, que dependiendo del tipo definido en la variable &lt;code class=&quot;highlighter-rouge&quot;&gt;codebuild_artifacts_type&lt;/code&gt; creaba un bloque diferente:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
locals {
  codebuild_artifacts_def = {
    &quot;S3&quot; = [{
      type                = &quot;${var.codebuild_artifacts_type}&quot;
      location            = &quot;${var.codebuild_artifacts_location}&quot;
      name                = &quot;${var.codebuild_artifacts_name}&quot;
      namespace_type      = &quot;${var.codebuild_artifacts_namespace_type}&quot;
      packaging           = &quot;${var.codebuild_artifacts_packaging}&quot;
      path                = &quot;${var.codebuild_artifacts_path}&quot;
      encryption_disabled = var.codebuild_artifacts_encryption_disabled
    }]

    &quot;CODEPIPELINE&quot; = [{
      type                = &quot;${var.codebuild_artifacts_type}&quot;
      location            = &quot;${var.codebuild_artifacts_location}&quot;
      name                = &quot;${var.codebuild_artifacts_name}&quot;
      namespace_type      = &quot;${var.codebuild_artifacts_namespace_type}&quot;
      packaging           = &quot;${var.codebuild_artifacts_packaging}&quot;
      path                = &quot;${var.codebuild_artifacts_path}&quot;
      encryption_disabled = var.codebuild_artifacts_encryption_disabled
    }]

    &quot;NO_ARTIFACTS&quot; = [{
      type = &quot;${var.codebuild_artifacts_type}&quot;
    }]
  }

  # Retuned map
  codebuild_artifacts = &quot;${local.codebuild_artifacts_def[var.codebuild_artifacts_type]}&quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;bloques-dinámicos-en-terraform-012x&quot;&gt;Bloques dinámicos en Terraform 0.12.x&lt;/h1&gt;

&lt;p&gt;Terraform 0.12.x propone el uso de &lt;a href=&quot;https://www.hashicorp.com/blog/hashicorp-terraform-0-12-preview-for-and-for-each&quot; target=&quot;_blank&quot;&gt;bloques dinámicos&lt;/a&gt; para solucionar este y otros casos relacionados a bloques. Para esto hay que usar &lt;code class=&quot;highlighter-rouge&quot;&gt;dynamic&lt;/code&gt; y &lt;code class=&quot;highlighter-rouge&quot;&gt;for-each&lt;/code&gt;. Por ejemplo, para la definición de arriba tendriamos lo siguiente:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  dynamic &quot;artifacts&quot; {
    for_each = [local.codebuild_artifacts]
    content {
      type                = artifacts.value.type
      encryption_disabled = lookup(artifacts.value, &quot;encryption_disabled&quot;, null)
      location            = lookup(artifacts.value, &quot;location&quot;, null)
      name                = lookup(artifacts.value, &quot;name&quot;, null)
      namespace_type      = lookup(artifacts.value, &quot;namespace_type&quot;, null)
      packaging           = lookup(artifacts.value, &quot;packaging&quot;, null)
      path                = lookup(artifacts.value, &quot;path&quot;, null)
    }
  }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Y la definición de &lt;code class=&quot;highlighter-rouge&quot;&gt;local.codebuild_artifacts&lt;/code&gt; se simplifica enormemente:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;locals {
  codebuild_artifacts = {
    type                = var.codebuild_artifacts_type
    location            = var.codebuild_artifacts_location
    name                = var.codebuild_artifacts_name
    namespace_type      = var.codebuild_artifacts_namespace_type
    packaging           = var.codebuild_artifacts_packaging
    path                = var.codebuild_artifacts_path
    encryption_disabled = var.codebuild_artifacts_encryption_disabled
  }
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;¿Dónde está la magia?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Primero, en el tipo de datos &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt;, el cual le dice a Terraform que ignore el atributo si la función &lt;code class=&quot;highlighter-rouge&quot;&gt;lookup&lt;/code&gt; no encuentra el índice en el map.&lt;/p&gt;

&lt;p&gt;Veamos las primeras línea de la definición del bloque  &lt;code class=&quot;highlighter-rouge&quot;&gt;content&lt;/code&gt;, que es lo que se subsituye en el bloque &lt;code class=&quot;highlighter-rouge&quot;&gt;artifacts&lt;/code&gt; en cada iteración:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    content {
      type                = artifacts.value.type
      encryption_disabled = lookup(artifacts.value, &quot;encryption_disabled&quot;, null)
      location            = lookup(artifacts.value, &quot;location&quot;, null)
      ...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Acá se puede apreciar que:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;El atributo &lt;code class=&quot;highlighter-rouge&quot;&gt;type&lt;/code&gt; siempre se define acorde al valor de &lt;code class=&quot;highlighter-rouge&quot;&gt;artifacts.value.type&lt;/code&gt;. Es decir, no se toma del map.&lt;/li&gt;
  &lt;li&gt;El atributo &lt;code class=&quot;highlighter-rouge&quot;&gt;encryption_disabled&lt;/code&gt; se asigna si se consigue en el map algo como &lt;code class=&quot;highlighter-rouge&quot;&gt;artifacts.value['encryption_disabled']&lt;/code&gt;. Si este ínidce no existe se le asiga &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt; y por ende no será tomado en cuenta pot Terraform.&lt;/li&gt;
  &lt;li&gt;Y es igual para el resto de los atributos, como por ejemplo &lt;code class=&quot;highlighter-rouge&quot;&gt;location&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Esto permite tener definiciones de bloques dinámicas, pero teniendo en cuenta que se deben definir ciertos valores en conjunto. Por ejemplo, para &lt;code class=&quot;highlighter-rouge&quot;&gt;S3&lt;/code&gt;se debe definir las variables:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var.codebuild_artifacts_type
var.codebuild_artifacts_location
var.codebuild_artifacts_name
var.codebuild_artifacts_namespace_type
var.codebuild_artifacts_packaging
var.codebuild_artifacts_path
var.codebuild_artifacts_encryption_disabled
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Mientras que para &lt;code class=&quot;highlighter-rouge&quot;&gt;NO_ARTIFACTS&lt;/code&gt; basta con:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var.codebuild_artifacts_type
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Por otro lado, la magia se completa por el hecho de que no se está usando la asingación para el bloque &lt;code class=&quot;highlighter-rouge&quot;&gt;artifacts&lt;/code&gt; sino por la definición del bloque. Es decir, en vez de usar esta asignación:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; artifacts = [&quot;${local.codebuild_artifacts}&quot;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Se usa la definición de bloque dinámico.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  dynamic &quot;artifacts&quot; {
    for_each = [local.codebuild_artifacts]
    content {
      ...
  }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;referencias&quot;&gt;Referencias:&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://lgallardo.com/2018/07/30/dynamic-configuration-blocks-in-terraform&quot; target=&quot;_blank&quot;&gt;Bloques dinámicos en Terraform 0.11.x&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.hashicorp.com/blog/hashicorp-terraform-0-12-preview-for-and-for-each&quot; target=&quot;_blank&quot;&gt;HashiCorp Terraform 0.12 Preview: For and For-Each&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Luis Gallardo</name></author><category term="AWS" /><category term="Terraform" /><summary type="html"></summary></entry><entry><title type="html">Guru of the week</title><link href="https://lgallardo.com/es/2019/05/13/2019-05-13-guru-of-the-week" rel="alternate" type="text/html" title="Guru of the week" /><published>2019-05-12T19:00:00-05:00</published><updated>2019-05-12T19:00:00-05:00</updated><id>https://lgallardo.com/es/2019/05/13/a-cloud-guru-of-the-week</id><content type="html" xml:base="https://lgallardo.com/es/2019/05/13/2019-05-13-guru-of-the-week">&lt;center&gt;&lt;img src=&quot;/images/guru-of-the-week-1.jpg&quot; alt=&quot;Guru of the week&quot; width=&quot;500&quot; height=&quot;386&quot; /&gt;&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;La semana pasada respondí la  &lt;a href=&quot;https://acloud.guru/forums/guru-of-the-week/discussion/-Ldw3i4mdiMIpJGY6tem/%5Baws%5D_-_guru_of_the_week_quest&quot; target=&quot;_blank&quot;&gt;pregunta del Guru of the Week&lt;/a&gt; y gané!. Algunas preguntas pueden ser truculentas, pero la clave es pensar en cuál servicio o tecnología resuelve mejor el problema.&lt;/p&gt;

&lt;center&gt;&lt;img src=&quot;/images/guru-of-the-week-2.jpg&quot; alt=&quot;Guru of the week&quot; width=&quot;500&quot; height=&quot;386&quot; /&gt;&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Cada semana hacen una nueva pregunta y los ganadores son mencionados en &lt;a href=&quot;https://acloud.guru/series/aws-this-week&quot; target=&quot;_blank&quot;&gt;AWS This Week&lt;/a&gt; de &lt;a href=&quot;https://acloud.guru/&quot; target=&quot;_blank&quot;&gt;A Cloud Guru&lt;/a&gt;. También ganan un premio que consiste en una camiseta, etiquetas y la oportunidad de ganar un pasaje gratis para la &lt;strong&gt;re:Invent 2019&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Ver el resumen de &lt;a href=&quot;https://acloud.guru/series/aws-this-week&quot; target=&quot;_blank&quot;&gt;AWS This Week&lt;/a&gt; es una excelente forma de mantenerce entereado de los cambios en AWS y de conocer nuevos servicios y tecnologías.&lt;/p&gt;

&lt;h2 id=&quot;referencias&quot;&gt;Referencias&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://acloud.guru/series/aws-this-week&quot; target=&quot;_blank&quot;&gt;AWS This Week&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://acloud.guru/forums/guru-of-the-week/&quot; target=&quot;_blank&quot;&gt;Guru of the Week questions&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://facebook/acloudgutu&quot; target=&quot;_blank&quot;&gt;Guru of the Week questions - Facebook&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://acloud.guru&quot; target=&quot;_blank&quot;&gt;A Cloud Guru&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Luis Gallardo</name></author><category term="AWS" /><summary type="html"></summary></entry><entry><title type="html">AWS Certified Alexa Skill Builder - Specialty</title><link href="https://lgallardo.com/es/2019/04/19/2019-04-19-aws-certified-alexa-skill-builder-specialty/" rel="alternate" type="text/html" title="AWS Certified Alexa Skill Builder - Specialty" /><published>2019-04-18T19:00:00-05:00</published><updated>2019-04-18T19:00:00-05:00</updated><id>https://lgallardo.com/es/2019/04/19/aws-certified-alexa-skill-builder-specialty</id><content type="html" xml:base="https://lgallardo.com/es/2019/04/19/2019-04-19-aws-certified-alexa-skill-builder-specialty/">&lt;center&gt;&lt;img src=&quot;/images/AWS_Certified_Alexa_Skill_Builder_Specialty.jpg&quot; alt=&quot;AWS CSA&quot; width=&quot;500&quot; height=&quot;386&quot; /&gt;&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;En enero presenté el examen beta &lt;code class=&quot;highlighter-rouge&quot;&gt;AWS Certified Alexa Skill Builder Specialty&lt;/code&gt; y ayer me llegó el resultado. Yo venía programando Skills de Alexa y cuando vi el blueprint del examen me llamó la atención que mucho del contenido ya lo conocía de una u otra forma.&lt;/p&gt;

&lt;p&gt;Fueron 80 preguntas para responder en 170 minutos, similar a un examen Professional.&lt;/p&gt;

&lt;h2 id=&quot;cómo-me-preparé&quot;&gt;¿Cómo me preparé?&lt;/h2&gt;

&lt;p&gt;A diferencia de otros examenes que he presentado la preparación para este fue diferente, ya que siendo un examen beta no existía ningún curso ni material didáctico enfocado para la certifiación.&lt;/p&gt;

&lt;p&gt;Antes de conocer la existencia del examen beta yo ya estaba experimentando con Alexa, y de hecho había visto el curso de la gente de &lt;code class=&quot;highlighter-rouge&quot;&gt;A Cloud Guru&lt;/code&gt; llamado &lt;a href=&quot;https://acloud.guru/learn/intro-alexa-free&quot; target=&quot;_blank&quot;&gt;Introduction to Alexa&lt;/a&gt;, que si bien está bueno para empezar es muy básico ya que solo toman los ejemplos que se consiguen en los repositorios de git de AWS, modificando solo un par de cosas en el código.&lt;/p&gt;

&lt;p&gt;También había seguido la serie de videos &lt;a href=&quot;https://acloud.guru/series/alexa-devs&quot; target=&quot;_blank&quot;&gt;Alexa Devs&lt;/a&gt;, la cual tiene mas contenidos que el curso introductorio, acá hay información mas especifica como el de el manejo de videos y pantallas.&lt;/p&gt;

&lt;h2 id=&quot;pero-qué-estudiar&quot;&gt;¿Pero qué estudiar?&lt;/h2&gt;

&lt;p&gt;Hay que estar bien familiarizado con los contenidos del blueprint que proporcionan al registrarse en el examen:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Domain&lt;/th&gt;
      &lt;th&gt;% of Examination&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Domain 1: Voice-First Design Practices and Capabilities&lt;/td&gt;
      &lt;td&gt;14%&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Domain 2: Skill Design&lt;/td&gt;
      &lt;td&gt;24%&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Domain 3: Skill Architecture&lt;/td&gt;
      &lt;td&gt;14%&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Domain 4: Skill Development&lt;/td&gt;
      &lt;td&gt;20%&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Domain 5: Test, Validate, and Troubleshoot&lt;/td&gt;
      &lt;td&gt;%18&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Domain 6: Publishing, Operations, and Lifecycle Management&lt;/td&gt;
      &lt;td&gt;10%&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Total&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;100%&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Por otro lado también recomiendo:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Aprender muy bien el JSON de petición / respuesta&lt;/li&gt;
  &lt;li&gt;Entender cómo funciona el programa Beta tester&lt;/li&gt;
  &lt;li&gt;Aprender cómo persistir los datos en una sesión y entre sesiones&lt;/li&gt;
  &lt;li&gt;Aprender los distintos interaction models y que intents son proporcionados por omisión&lt;/li&gt;
  &lt;li&gt;Entender los Built-in intents estándar&lt;/li&gt;
  &lt;li&gt;Conocer los servicios backend de AWS que usa Alexa, como por ejemplo Lambda, DynamoDB, S3, etc&lt;/li&gt;
  &lt;li&gt;Conocer cómo dar permisos a funciones lambda&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;tip-extra&quot;&gt;Tip extra&lt;/h2&gt;

&lt;p&gt;Al ser una especialización muchas de las preguntas resultan largas y confusas, por lo que te recomiendo que cuando leas en la pregunta &lt;code class=&quot;highlighter-rouge&quot;&gt;Alexa Skill Builder&lt;/code&gt; lo reemplazases  en tu mente por &lt;code class=&quot;highlighter-rouge&quot;&gt;Developer&lt;/code&gt;, ya que suena muy raro cuando lees algo como  “An Alexa Skill Builder builds a skill…”&lt;/p&gt;

&lt;h2 id=&quot;recomendaciones-para-ganar-tiempo-en-el-examen&quot;&gt;Recomendaciones para ganar tiempo en el examen:&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Las preguntas fáciles respóndelas rápidamente, no te quedes mucho tiempo pensando en si es la respuesta correcta porque seguro lo es.&lt;/li&gt;
  &lt;li&gt;Solo marcar las preguntas en las que realmente tienes dudas, así al momento de revisarlas puedes enfocarte en solo esas y si queda tiempo empezar a revisar el resto&lt;/li&gt;
  &lt;li&gt;Piensen que es una certificación de Amazon, en ese sentido siempre preguntarse cuál servicio de Amazon corresponde.&lt;/li&gt;
  &lt;li&gt;Descartar cosas que se pueden hacer a nivel de S.O. si un servicio de Amazon lo provee, y solo considerarlo cuando no hay mas opción.&lt;/li&gt;
  &lt;li&gt;Siempre que lean scalable piensen en SQS/DynamoDB, cost-saving = S3/S3 RRS, y así.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Si estás interesado en esta certificación te recomiendo algunos enlaces:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cursos en línea&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://acloud.guru/learn/intro-alexa-free&quot; target=&quot;_blank&quot;&gt;Introduction to Alexa&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://acloud.guru/series/alexa-devs&quot; target=&quot;_blank&quot;&gt;Alexa Devs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Documentación de AWS&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://aws.amazon.com/whitepapers/&quot; target=&quot;_blank&quot;&gt;Whitepapers&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://aws.amazon.com/documentation/&quot; target=&quot;_blank&quot;&gt;Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://aws.amazon.com/faqs/&quot; target=&quot;_blank&quot;&gt;FAQs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Luis Gallardo</name></author><category term="AWS" /><summary type="html"></summary></entry><entry><title type="html">Pyenv al rescate</title><link href="https://lgallardo.com/es/2019/02/26/pyenv-to-the-rescue" rel="alternate" type="text/html" title="Pyenv al rescate" /><published>2019-02-25T18:00:00-06:00</published><updated>2019-02-25T18:00:00-06:00</updated><id>https://lgallardo.com/es/2019/02/26/pyenv-to-the-rescue</id><content type="html" xml:base="https://lgallardo.com/es/2019/02/26/pyenv-to-the-rescue">&lt;center&gt;&lt;img src=&quot;/images/Python-logo-150.jpg&quot; alt=&quot;Python&quot; /&gt;&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;el-problema&quot;&gt;El problema&lt;/h1&gt;

&lt;p&gt;Hace poco cambié a &lt;em&gt;Debian testing&lt;/em&gt; nuevamente para entre otras cosas poder usar Python 3.6. Empecé a trabajar con esta versión, a crear mis Lambda Layers y todo bien hasta que &lt;em&gt;Debian testing&lt;/em&gt; cambió a Python 3.7. Bueno, me dije a mí mismo, no hay drama con &lt;code class=&quot;highlighter-rouge&quot;&gt;alternative&lt;/code&gt; puedo cambiar versiones de Python sin problemas o de última decirle a &lt;code class=&quot;highlighter-rouge&quot;&gt;virtualenv&lt;/code&gt; que use un intérprete u otro.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;:~# update-alternatives --config python
There are 3 choices for the alternative python (providing /usr/bin/python).

  Selection    Path                Priority   Status
------------------------------------------------------------
  0            /usr/bin/python3.6   3         auto mode
  1            /usr/bin/python2     1         manual mode
  2            /usr/bin/python3     2         manual mode
* 3            /usr/bin/python3.6   3         manual mode

Press &amp;lt;enter&amp;gt; to keep the current choice[*], or type selection number: 3

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Pero incluso usando &lt;code class=&quot;highlighter-rouge&quot;&gt;alternative&lt;/code&gt; o forzando el intérprete para usar Python 3.6 al parecer queda algo siempre apuntando a Python 3.7:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ virtualenv -p /usr/bin/python3.6 test
Running virtualenv with interpreter /usr/bin/python3.6
Traceback (most recent call last):
  File &quot;/home/lgallard/.local/lib/python3.7/site-packages/virtualenv.py&quot;, line 22, in &amp;lt;module&amp;gt;
    import distutils.spawn
ModuleNotFoundError: No module named 'distutils.spawn'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h1 id=&quot;pyenv-al-rescate&quot;&gt;pyenv al rescate&lt;/h1&gt;

&lt;p&gt;Existe una manejador de versiones de Python llamado &lt;a href=&quot;https://github.com/pyenv/pyenv#choosing-the-python-version&quot; target=&quot;_blank&quot;&gt;pyenv&lt;/a&gt; el cual permite configurar el entorno a usar tanto local como de forma global.&lt;/p&gt;

&lt;p&gt;Por ejemplo, para instalar la versión de Python 3.6.8 basta con hacer:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pyenv install 3.6.8
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Podemos verificar las versiones de la siguiente manera:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ pyenv versions
  system
* 3.6.8 (set by /home/lgallard/.pyenv/version)

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Luego para usar la versión instalada con pyenv, basta con pasarle la ruta:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ virtualenv -p ~/.pyenv/versions/3.6.8/bin/python test
Running virtualenv with interpreter /home/lgallard/.pyenv/versions/3.6.8/bin/python
Using base prefix '/home/lgallard/.pyenv/versions/3.6.8'
New python executable in /home/lgallard/test/bin/python
Installing setuptools, pip, wheel...
done.

./test/bin/python --version
Python 3.6.8
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;De esta forma pude seguir usando la versión especifica de Python que necesitaba.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Referencias:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/pyenv/pyenv#choosing-the-python-version&quot; target=&quot;_blank&quot;&gt;pyenv&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/23842713/using-python-3-in-virtualenv&quot; target=&quot;_blank&quot;&gt;Using Python 3 in virtualenv&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Luis Gallardo</name></author><category term="Python" /><summary type="html"></summary></entry><entry><title type="html">Usando el ASK SDK de Alexa desde Lambda Layers</title><link href="https://lgallardo.com/es/2018/12/04/using-alexa-ask-from-lambda-layers" rel="alternate" type="text/html" title="Usando el ASK SDK de Alexa desde Lambda Layers" /><published>2018-12-03T18:00:00-06:00</published><updated>2018-12-03T18:00:00-06:00</updated><id>https://lgallardo.com/es/2018/12/04/using-alexa-ask-from-lambda-layers</id><content type="html" xml:base="https://lgallardo.com/es/2018/12/04/using-alexa-ask-from-lambda-layers">&lt;center&gt;&lt;img src=&quot;/images/alexa_lambda_layers.jpg&quot; alt=&quot;Alexa + lambda + Layers&quot; /&gt;&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;lambda-layers&quot;&gt;Lambda Layers&lt;/h1&gt;
&lt;p&gt;Recientemente se incorporó &lt;a href=&quot;https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html&quot; target=&quot;_blank&quot;&gt;Lambda Layers&lt;/a&gt; en AWS, que básicamente permite compartir librerías y códigos entre funciones Lambda. Esto permite agilizar el desarrollo ya que ahora no es necesario empaquetar todas las librerías con la función Lambda, como hacíamos con el ASK de Alexa, sino que ahora estás librerías se pueden subir de forma independiente en Lambda Layers y usarlas directamente en nuestras funciones.&lt;/p&gt;

&lt;h1 id=&quot;ask-sdk-de-alexa&quot;&gt;ASK SDK de Alexa&lt;/h1&gt;
&lt;p&gt;Para preparar el ASK de Alexa para Lambda Layers podemos seguir los siguientes pasos:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;virtualenv python
source python/bin/activate
pip install ask-sdk
zip -r ask-sdk.zip python/lib/python3.6/site-packages/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Ahora puedes usar el ASK SDK de Alexa desde tus funciones lambda sin necesidad de subirlo en cade despliegue.&lt;/p&gt;

&lt;h1 id=&quot;subiendo-el-ask-sdk-a-lambda-layer&quot;&gt;Subiendo el ASK SDK a Lambda Layer&lt;/h1&gt;

&lt;p&gt;Lo primero que debemos hacer es crear el Lambda Layers desde la consola:&lt;/p&gt;

&lt;center&gt;&lt;img src=&quot;/images/create_layer.jpg&quot; alt=&quot;Create Layer&quot; /&gt;&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Luego completamos el formulario y seleccionamos el .zip que creamos para subirlo, y finalmente le indicamos el runtime con que es compatible.&lt;/p&gt;

&lt;center&gt;&lt;img src=&quot;/images/ask_sdk_lambda_layer.jpg&quot; alt=&quot;Add SDK&quot; /&gt;&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Una vez creada podremos ver la descripción y la versión:&lt;/p&gt;

&lt;center&gt;&lt;img src=&quot;/images/ask_sdk_lambda_layer2.jpg&quot; alt=&quot;Add SDK&quot; /&gt;&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;cómo-incluir-el-ask-sdk-desde-lambda-layers&quot;&gt;¿Cómo incluir el ASK SDK desde Lambda Layers?&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Ve a tu función Lambda y justo debajo del nombre de tu función haz clic en &lt;strong&gt;&lt;em&gt;Layers&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Desde el apartado &lt;strong&gt;&lt;em&gt;Referenced layers&lt;/em&gt;&lt;/strong&gt; en la parte inferior, haz clic en el botón &lt;strong&gt;&lt;em&gt;Add a layer&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;center&gt;&lt;img src=&quot;/images/add_layer1.jpg&quot; alt=&quot;Add SDK&quot; /&gt;&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Selecciona el layer &lt;strong&gt;&lt;em&gt;ask-sdk&lt;/em&gt;&lt;/strong&gt; desde el menú desplegable, y haz clic en &lt;strong&gt;&lt;em&gt;Add&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;center&gt;&lt;img src=&quot;/images/add_layer2.jpg&quot; alt=&quot;Add SDK&quot; /&gt;&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Como puedes ver, el Lambda Layer con el ASK SDK de Alexa ya puede ser usado en esta función Lambda:&lt;/p&gt;

&lt;center&gt;&lt;img src=&quot;/images/add_layer3.jpg&quot; alt=&quot;Add SDK&quot; /&gt;&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Puedes seleccionar este mismo Layer para las otras funciones Lambda que usen el mismo ASK SDK y runtime sin tener que estar subiéndolo en cada despliegue.&lt;/p&gt;</content><author><name>Luis Gallardo</name></author><category term="AWS" /><category term="Alexa" /><category term="Lambda" /><category term="Layers" /><summary type="html"></summary></entry><entry><title type="html">AWS CodePipeline con Bitbucket</title><link href="https://lgallardo.com/es/2018/09/07/codepipeline-bitbucket" rel="alternate" type="text/html" title="AWS CodePipeline con Bitbucket" /><published>2018-09-06T19:00:00-05:00</published><updated>2018-09-06T19:00:00-05:00</updated><id>https://lgallardo.com/es/2018/09/07/codepipeline-bitbucket</id><content type="html" xml:base="https://lgallardo.com/es/2018/09/07/codepipeline-bitbucket">&lt;center&gt;&lt;img src=&quot;/images/CodePipeline_bitbucket.jpg&quot; alt=&quot;AWS CodePipeline and Bitbucket&quot; /&gt;&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;En el trabajo necesitaba desplegar una aplicación usando AWS CodePipeline pero el repositorio donde se encuentra el código está en Bitbucket. Esto representó un desafío interesante porque AWS Pipeline no soporta Bitbucket, a diferencia de AWS CodeBuild que si lo soporta.&lt;/p&gt;

&lt;p&gt;Si se investiga un poco en internet se pueden encontrar soluciones alternativas a este problema, como por ejemplo tener un webhook en el repositorio que llame a una función lambda y que genere un archivo en un bucket y que sea el disparador de AWS CodePipeline [1]. Otra posible solución es usar Bitbucket Pipelines para crear el objeto a colocar en el bucket, o incluso hacer un espejo del contenido del repositorio de Bitbucket en AWS CodeCommit.&lt;/p&gt;

&lt;p&gt;Como no me terminaron de convencer estas soluciones alternativas, estuve pensando una solución donde todo quedara en AWS y que no tuviese que configurar los repositorios, y la clave fue el soporte que si tiene AWS CodeBuild con Bitbucket. Entonces, en vez de usar el pipeline de Bitbucket para generar la fuente de AWS CodePipeline, con AWS CodeBuild genero un archivo zip con el código fuente de la aplicación la cual luego es usada como entrada.&lt;/p&gt;

&lt;p&gt;En particular esta aplicación es una imagen Docker que se genera con AWS CodeBuild y luego se guarda en AWS ECR, Este CodeBuild genera como artefacto de salida la definición de la tarea de ECS, la cual es tomada como entrada en la face de despliegue de ECS, actualizando el servicio y por ende la aplicación:&lt;/p&gt;

&lt;center&gt;&lt;img src=&quot;/images/aws_codepipeline_succeded.jpg&quot; alt=&quot;AWS Codebuild trigger&quot; /&gt;&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;no-todo-es-perfecto&quot;&gt;No todo es perfecto&lt;/h1&gt;

&lt;p&gt;Enumero algunas cosas que se debe considerar con esta solución:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Para que CodeBuild acceda a los repositorios privados de Bitbucket se debe autenticar con un usuario desde la consola web de AWS. Si están pensando en automatizar la creación de este disparador consideren usar una cuenta de servicio que tenga acceso de solo lectura sobre el repositorio.&lt;/li&gt;
  &lt;li&gt;El proyecto de AWS CodeBuild que sirve de disparador no se ejecutará automáticamente al actualizar el repositorio, por lo que tienen que iniciar el proyecto. Si quieren que esto sea automático o lo más parecido posible, pueden configurar una tarea programada en el proyecto:&lt;/li&gt;
&lt;/ol&gt;

&lt;center&gt;&lt;img src=&quot;/images/aws_codebuild_trigger.jpg&quot; alt=&quot;AWS Codebuild trigger&quot; /&gt;&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;[1] &lt;a href=&quot;https://aws.amazon.com/blogs/devops/integrating-git-with-aws-codepipeline/&quot; target=&quot;_blank&quot;&gt;Integrating Git with AWS CodePipeline&lt;/a&gt;&lt;/p&gt;</content><author><name>Luis Gallardo</name></author><category term="AWS" /><category term="Codebuild" /><category term="CodePipeline" /><category term="Bitbucket" /><summary type="html"></summary></entry><entry><title type="html">AWS Certified DevOps Engineer - Professional</title><link href="https://lgallardo.com/es/2018/08/12/aws-certified-devops-engineer-professional" rel="alternate" type="text/html" title="AWS Certified DevOps Engineer - Professional" /><published>2018-08-11T19:00:00-05:00</published><updated>2018-08-11T19:00:00-05:00</updated><id>https://lgallardo.com/es/2018/08/12/aws-certified-devops-engineer-professional</id><content type="html" xml:base="https://lgallardo.com/es/2018/08/12/aws-certified-devops-engineer-professional">&lt;center&gt;&lt;img src=&quot;/images/AWS_Certified_DevOps_Engineer_Professional.jpg&quot; alt=&quot;AWS CSA&quot; width=&quot;500&quot; height=&quot;386&quot; /&gt;&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Recientemente aprobé la certificación &lt;code class=&quot;highlighter-rouge&quot;&gt;AWS Certified DevOps Engineer - Professional&lt;/code&gt; y quería dejar mis comentarios respecto al examen:&lt;/p&gt;

&lt;p&gt;Fueron 80 preguntas para responder en 170 minutos. Este examen es el más difícil ya que debes saber sobre los contenidos anteriores de Developer y SysOps. En general debes saber las tecnología de AWS y cuándo usarlas desde la perspectiva de DevOps para el despliegue de aplicaciones sobre AWS. En particular los temas claves acá son CloudFormation, OpsWorks, Elastic Beanstalk y Auto Scaling Groups&lt;/p&gt;

&lt;h1 id=&quot;cloudformation&quot;&gt;CloudFormation&lt;/h1&gt;
&lt;p&gt;Como mínimo debes saber cómo se compone una plantilla de CloudFormation, cómo actualizar un stack, cómo evitar que se actualice, diferencia entre WaitCondition y Creation Policy, cómo hacer rolling update de los ASGs, tipos de recursos.&lt;/p&gt;

&lt;h1 id=&quot;opsworks&quot;&gt;OpsWorks&lt;/h1&gt;
&lt;p&gt;Aquí debes tener claro los conceptos de Stack, Layer, y Application. Saber qué son los Lyfecyles events y cómo o cuándo se ejecutan.Es de suma importancia saber el comando “deployment” y tener en cuenta que no solo sirve para hacer despliegue de aplicaciones. También es importante que recuerdes que con OpsWorks puedes agregar infraestructura existen a los stacks (cosa que no puedes hacer en CloudFormation o Elastic Beanstalk) y que solo puedes asociar una instancia RDS por stack.&lt;/p&gt;

&lt;h1 id=&quot;elastic-beanstalk&quot;&gt;Elastic Beanstalk&lt;/h1&gt;
&lt;p&gt;Entiende los casos de uso del servicio, recuerda que puede usar Docker en EB, por lo que prácticamente puedes ejecutar cualquier cosa en contenedores. Estudia cómo crear configuraciones desde el .ebextenstions, así como también cómo guardar configuraciones y la precedencia entre las distintas formas de hacerlo. Importante que sepas los tipos de despliegue que puedes realizar con EB, y en particular que es uno de los que permite hacer despliegues Blue/Green de forma integrada al servicio, pero que por el contrario debes usar Route 53 si quiere hacer un despliegue A/B.&lt;/p&gt;

&lt;h1 id=&quot;auto-scaling-groups&quot;&gt;Auto Scaling Groups&lt;/h1&gt;
&lt;p&gt;De los Auto Scaling Groups debes saber las Termination policies, y cuáles son útiles para hacer despliegues de aplicaciones. También estudia los Lifecycle Hooks y en particular todos los estados por el que pasa una instancia, y los casos de uso cuando está en &lt;code class=&quot;highlighter-rouge&quot;&gt;pending:wait&lt;/code&gt; y &lt;code class=&quot;highlighter-rouge&quot;&gt;terminating:wait&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&quot;lo-demás&quot;&gt;Lo demás&lt;/h1&gt;
&lt;p&gt;El resto del examen se enfoca en evaluarte tus conocimientos de los tipos de despliegue en AWS, así como temas de las certificaciones de Developer y SysOps, como pueden ser DynamoDB o CloudWatch.&lt;/p&gt;

&lt;h1 id=&quot;mis-recomendaciones-para-ganar-tiempo-en-este-examen-son&quot;&gt;Mis recomendaciones para ganar tiempo en este examen son:&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Las preguntas fáciles respóndelas rápidamente, no te quedes mucho tiempo pensando en si es la respuesta correcta porque seguro lo es.&lt;/li&gt;
  &lt;li&gt;Solo marcar las preguntas en las que realmente tienes dudas, así al momento de revisarlas puedes enfocarte en solo esas y si queda tiempo empezar a revisar el resto&lt;/li&gt;
  &lt;li&gt;Piensen que es una certificación de Amazon, en ese sentido siempre preguntarse cuál servicio de Amazon corresponde.&lt;/li&gt;
  &lt;li&gt;Descartar cosas que se pueden hacer a nivel de S.O. si un servicio de Amazon lo provee, y solo considerarlo cuando no hay mas opción.&lt;/li&gt;
  &lt;li&gt;Siempre que lean scalable piensen en SQS/DynamoDB, cost-saving = S3/S3 RRS, y así.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Si estás interesado en esta certificación te recomiendo algunos enlaces:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cursos en línea&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://linuxacademy.com&quot; target=&quot;_blank&quot;&gt;Linux Academy&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://acloud.guru/learn/aws-certified-devops-engineer-professional&quot; target=&quot;_blank&quot;&gt;A Cloud Guru&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://cloudacademy.com/aws-certifications-training/&quot; target=&quot;_blank&quot;&gt;Cloud Academy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Documentación de AWS&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://aws.amazon.com/whitepapers/&quot; target=&quot;_blank&quot;&gt;Whitepapers&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://aws.amazon.com/documentation/&quot; target=&quot;_blank&quot;&gt;Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://aws.amazon.com/faqs/&quot; target=&quot;_blank&quot;&gt;FAQs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Luis Gallardo</name></author><category term="AWS" /><summary type="html"></summary></entry><entry><title type="html">Bloques de configuración dinámicos en Terraform</title><link href="https://lgallardo.com/es/2018/07/30/dynamic-configuration-blocks-in-terraform/" rel="alternate" type="text/html" title="Bloques de configuración dinámicos en Terraform" /><published>2018-07-29T19:00:00-05:00</published><updated>2018-07-29T19:00:00-05:00</updated><id>https://lgallardo.com/es/2018/07/30/dynamic-configuration-blocks-in-terraform</id><content type="html" xml:base="https://lgallardo.com/es/2018/07/30/dynamic-configuration-blocks-in-terraform/">&lt;center&gt;&lt;img src=&quot;/images/terraform.jpg&quot; alt=&quot;Terraform&quot; /&gt;&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Una de las cosas que tenía pendiente por resolver era el hecho de que en Terraform hay bloques de configuración que dependiendo de las opciones puede que tengan parámetros distintos o que incluso no acepte los mismos parámetros.&lt;/p&gt;

&lt;p&gt;Para eso, y guiándome de un código de un &lt;a href=&quot;https://github.com/cloudposse/terraform-aws-codebuild&quot; target=&quot;_blank&quot;&gt;módulo de la  comunidad&lt;/a&gt;, logré sortear este problema usando &lt;a href=&quot;https://www.terraform.io/docs/configuration/locals.html&quot; target=&quot;_blank&quot;&gt;locals values de Terraform&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Tomando un ejemplo de esto tenemos el bloque &lt;code class=&quot;highlighter-rouge&quot;&gt;artifacts&lt;/code&gt; del recurso &lt;a href=&quot;https://www.terraform.io/docs/providers/aws/r/codebuild_project.html&quot; target=&quot;_blank&quot;&gt;aws_codebuild_project de Terraform&lt;/a&gt;, el cual puede tener parámetros algunos parámetros si el tipo es &lt;code class=&quot;highlighter-rouge&quot;&gt;S3&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;CODEPIPELINE&lt;/code&gt; o &lt;code class=&quot;highlighter-rouge&quot;&gt;NO_ARTIFACTS&lt;/code&gt;. Por ejemplo, si definimos un bloque de la siguiente manera no será fácil la parametrización del mismo:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;resource &quot;aws_codebuild_project&quot; &quot;codebuild&quot; {

[...]

  artifacts{
      type           = &quot;${var.codebuild_artifacts_type}&quot;
      location       = &quot;${var.codebuild_artifacts_location}&quot;
      name           = &quot;${var.codebuild_artifacts_name}&quot;
      namespace_type = &quot;${var.codebuild_artifacts_namespace_type}&quot;
      packaging      = &quot;${var.codebuild_artifacts_packaging}&quot;
      path           = &quot;${var.codebuild_artifacts_path}&quot;

  }
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Si por ejemplo intentamos colocar el &lt;code class=&quot;highlighter-rouge&quot;&gt;NO_ARTIFACTS&lt;/code&gt; fallará porque aunque se coloquen valores “vacíos” para el resto de los parámetros, estos argumentos no están soportados. Para resolver esto hay que crear una definición del bloque con &lt;code class=&quot;highlighter-rouge&quot;&gt;locals&lt;/code&gt; según el tipo proporcionado por &lt;code class=&quot;highlighter-rouge&quot;&gt;type&lt;/code&gt; y usar esto como un índice:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;resource &quot;aws_codebuild_project&quot; &quot;codebuild&quot; {

[...]

  artifacts = [&quot;${local.codebuild_artifacts}&quot;]

}

locals {
  codebuild_artifacts_def = {
    &quot;S3&quot; = [{
      type           = &quot;${var.codebuild_artifacts_type}&quot;
      location       = &quot;${var.codebuild_artifacts_location}&quot;
      name           = &quot;${var.codebuild_artifacts_name}&quot;
      namespace_type = &quot;${var.codebuild_artifacts_namespace_type}&quot;
      packaging      = &quot;${var.codebuild_artifacts_packaging}&quot;
      path           = &quot;${var.codebuild_artifacts_path}&quot;
    }]

    &quot;CODEPIPELINE&quot; = [{
      type           = &quot;${var.codebuild_artifacts_type}&quot;
      location       = &quot;${var.codebuild_artifacts_location}&quot;
      name           = &quot;${var.codebuild_artifacts_name}&quot;
      namespace_type = &quot;${var.codebuild_artifacts_namespace_type}&quot;
      packaging      = &quot;${var.codebuild_artifacts_packaging}&quot;
      path           = &quot;${var.codebuild_artifacts_path}&quot;
    }]

    &quot;NO_ARTIFACTS&quot; = [{
      type = &quot;${var.codebuild_artifacts_type}&quot;
    }]
  }

  # Retuned map
  codebuild_artifacts = &quot;${local.codebuild_artifacts_def[var.codebuild_artifacts_type]}&quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Esto crea un bloque diferente dependiendo del tipo definido en la variable &lt;code class=&quot;highlighter-rouge&quot;&gt;codebuild_artifacts_type&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;referencias&quot;&gt;Referencias:&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.terraform.io/docs/configuration/locals.html&quot; target=&quot;_blank&quot;&gt;locals values de Terraform&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/cloudposse/terraform-aws-codebuild&quot; target=&quot;_blank&quot;&gt;módulo de la  comunidad de terraform-aws-codebuild&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Luis Gallardo</name></author><category term="AWS" /><category term="Terraform" /><summary type="html"></summary></entry><entry><title type="html">Consultando AWS Logs desde la línea de órdenes</title><link href="https://lgallardo.com/es/2018/07/25/awslogs-cli/" rel="alternate" type="text/html" title="Consultando AWS Logs desde la línea de órdenes" /><published>2018-07-19T19:00:00-05:00</published><updated>2018-07-19T19:00:00-05:00</updated><id>https://lgallardo.com/es/2018/07/25/awslogs-from-cli</id><content type="html" xml:base="https://lgallardo.com/es/2018/07/25/awslogs-cli/">&lt;center&gt;&lt;img src=&quot;/images/lambda-logs.jpg&quot; alt=&quot;Lambda logs&quot; /&gt;&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Uno de los desarrolladores de la empresa me preguntó si había forma de ver las bitácoras de las funciones Lambda desde la línea de órdenes, para no tener la necesidad de entrar a la consola de AWS y verlos en CloudWatch Logs.
Después de investigar un poco conseguí un proyecto en Github llamado &lt;a href=&quot;https://github.com/jorgebastida/awslogs&quot; target=&quot;_blank&quot;&gt;awslogs&lt;/a&gt; que hace justamente esto. A continuación veremos cómo instalarlo y usarlo desde un entorno virtual de Python:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;virualenv awslogs
source awslogs/bin/activate

pip install awslogs
pip install awscli
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Lo primero que debemos saber son los grupos donde están definidos los logs de nuestras funciones Lambda, para ello usamos la CLI de AWS:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
aws logs describe-log-grups --region us-east-1
{
    &quot;logGroups&quot;: [
        {
            &quot;arn&quot;: &quot;arn:aws:logs:us-east-1:123456789123:log-group:/aws/lambda/get_transcription:*&quot;, 
            &quot;creationTime&quot;: 1531834572841, 
            &quot;metricFilterCount&quot;: 0, 
            &quot;logGroupName&quot;: &quot;/aws/lambda/get_transcription&quot;, 
            &quot;storedBytes&quot;: 0
        },
        {
            &quot;arn&quot;: &quot;arn:aws:logs:us-east-1:264349563434:log-group:/aws/lambda/validate_time:*&quot;, 
            &quot;creationTime&quot;: 1532118107128, 
            &quot;metricFilterCount&quot;: 0, 
            &quot;logGroupName&quot;: &quot;/aws/lambda/validate_time&quot;, 
            &quot;storedBytes&quot;: 0
        }
    ]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Ahora para verlos las bitácoras de, por ejemplo, la función &lt;code class=&quot;highlighter-rouge&quot;&gt;get_transcription&lt;/code&gt; desde la línea de órdenes podemos ejecutar:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;awslogs get  /aws/lambda/get_transcription --aws-region us-east-1  --watch  | cut -d &quot; &quot; -f 3-20

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Y la salida sería algo como esto:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;START RequestId: a2124cb1-818e-11e8-acc8-5bd968ce3fe1 Version: $LATEST
[DEBUG]	2018-07-23T15:39:50.422Z	a2124cb1-818e-11e8-acc8-5bd968ce3fe1	Searching id: e321-eaefe4311ca1
tuple indices must be integers or slices, not str: TypeError
recent call last):
File &quot;/var/task/app/services/get_transcription.py&quot;, line 100, in lambda_handler
  date_text = field['transcription']
indices must be integers or slices, not str
END RequestId: a2124cb1-818e-11e8-acc8-5bd968ce3fe1
REPORT RequestId: a2124cb1-818e-11e8-acc8-5bd968ce3fe1	Duration: 265.66 ms	Billed Duration: 300 ms 	Memory Size: 128 MB	Max Memory Used: 33 MB
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;referencias&quot;&gt;Referencias:&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/jorgebastida/awslogs&quot; target=&quot;_blank&quot;&gt;jorgebastida/awslogs&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gist.github.com/apeckham/9bcb464096997c1b0d41&quot; target=&quot;_blank&quot;&gt;View aws lambda logs on the command line&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Luis Gallardo</name></author><category term="AWS" /><summary type="html"></summary></entry></feed>
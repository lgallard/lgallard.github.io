<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="3.6.0">Jekyll</generator><link href="https://lgallardo.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://lgallardo.com/" rel="alternate" type="text/html" hreflang="en" /><updated>2025-06-12T09:01:47-05:00</updated><id>https://lgallardo.com/</id><title type="html">lgallardo.com</title><subtitle>DevOps Engineer and Backend Solutions Developer specializing in Kubernetes, AWS, Python, and Terraform. Sharing insights on cloud infrastructure, automation, and system architecture.</subtitle><author><name>Luis M. Gallardo D.</name></author><entry><title type="html">Exploring Cursor Background Agents: A Hands-On Experience</title><link href="https://lgallardo.com/2025/06/11/cursor-background-agents-experience/" rel="alternate" type="text/html" title="Exploring Cursor Background Agents: A Hands-On Experience" /><published>2025-06-10T19:00:00-05:00</published><updated>2025-06-10T19:00:00-05:00</updated><id>https://lgallardo.com/2025/06/11/cursor-background-agents-experience</id><content type="html" xml:base="https://lgallardo.com/2025/06/11/cursor-background-agents-experience/">&lt;p&gt;&lt;img src=&quot;/assets/images/cursor-background-agents-experience.png&quot; alt=&quot;Cursor Background Agents Experience&quot; style=&quot;display:block; margin-left:auto; margin-right:auto; width:60%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The other day, someone at work commented that Cursor also has background agents. I decided to give it a try with one of my own repos (&lt;code class=&quot;highlighter-rouge&quot;&gt;terraform-aws-ecr&lt;/code&gt;) and this is the whole experience.&lt;/p&gt;

&lt;h2 id=&quot;getting-started&quot;&gt;Getting Started&lt;/h2&gt;

&lt;p&gt;First off, I had to disable the privacy mode in Cursor. This is a requirement in the preview phase (it may change in the future?), but Cursor claims all environments are isolated from each other.&lt;/p&gt;

&lt;p&gt;To start working with the agent, I asked Copilot to suggest improvements to the Terraform module (let‚Äôs say it was the ‚Äúplanning‚Äù phase), then I did the same in Cursor and asked it to compare the result (I copied &amp;amp; pasted it from Copilot) and to create the issues with the MCP server for GitHub.&lt;/p&gt;

&lt;h2 id=&quot;setting-up-the-environment&quot;&gt;Setting Up the Environment&lt;/h2&gt;

&lt;p&gt;To start working with the Background Agents, in Cursor I clicked on the ‚ÄúShow Background History‚Äù icon. This led me to the install app &amp;amp; configuration process for the machine that will be running the agents for this repo. It opens a cursor-alike interface where we can interact while setting up the environment.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/cursor-background-agents.jpg&quot; alt=&quot;Show Background History&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/cursor-background-agents-new.jpg&quot; alt=&quot;New Agents&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here I asked to validate linters and tools needed for the project. After some issues with Python (now modules have to be installed in envs instead of the OS) which I fixed with the very same Cursor interface, I had my machine ready to launch background agents.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/cursor-background-agents-env.jpg&quot; alt=&quot;Background Agents Machibe Agents&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;first-agent-launch&quot;&gt;First Agent Launch&lt;/h2&gt;

&lt;p&gt;When launching the first agent, I was warned about the fact agents need setting a base-price üòÖ. I set $20 for testing and any future use.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/cursor-background-agents-price.jpg&quot; alt=&quot;Background Agents Machine Agents&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I instructed the agent to start working on &lt;a href=&quot;https://github.com/lgallard/terraform-aws-ecr/issues/33&quot;&gt;issue #33&lt;/a&gt;. Once finished I saw the green checked mark, meaning the agent had finished (after 3 min).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/cursor-background-agents-ready.jpg&quot; alt=&quot;Cursor Background Agent done&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I opened the agent and saw the result. It also suggested to create a PR, which I accepted.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/cursor-background-agents-PR.jpg&quot; alt=&quot;Cursor Background Agents PR&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The PR was created, however my only complaint was that the description was not completed and the title didn‚Äôt follow the release-please format (I realized it when I merged the PR and the GH action didn‚Äôt create a chore PR for the release). I completed the description using GitHub Copilot‚Äôs Summary option. Btw, the PR was co-authored with Cursor.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/cursor-background-agants-coauthored.jpg&quot; alt=&quot;Cursor Background Agents - coauthor&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;cost-analysis&quot;&gt;Cost Analysis&lt;/h2&gt;

&lt;p&gt;Finally I checked the cost of the test: &lt;strong&gt;$4.63 for an easy PR&lt;/strong&gt; ü§î. We have to take into account that Background Agents only use MAX models at the moment.&lt;/p&gt;

&lt;h2 id=&quot;key-takeaways&quot;&gt;Key Takeaways&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Setup Process&lt;/strong&gt;: The environment configuration is straightforward, though some Python environment issues needed resolving&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Speed&lt;/strong&gt;: The agent completed a simple task in just 3 minutes&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Quality&lt;/strong&gt;: The code changes were solid, but PR formatting could be improved&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Cost&lt;/strong&gt;: At $4.63 for a simple PR, costs can add up quickly with MAX models&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Integration&lt;/strong&gt;: Good GitHub integration, though release-please formatting wasn‚Äôt followed&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Co-authoring&lt;/strong&gt;: Nice touch that PRs are co-authored with Cursor&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I just wanted to share this if anyone is considering to use Cursor Background Agents. The experience was generally positive - the agents work efficiently and produce quality results. However, consider the cost implications and be prepared for some setup requirements like disabling privacy mode.&lt;/p&gt;

&lt;p&gt;The technology shows promise for automating routine development tasks, but human oversight is still needed for proper PR formatting and adherence to project-specific conventions.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This experience was conducted during Cursor‚Äôs preview phase. Features and requirements may change as the product evolves.&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name>Luis Gallardo</name></author><category term="AI Tools" /><category term="Terraform" /><category term="Automation" /><summary type="html">I decided to give Cursor Background Agents a try with one of my own repos (terraform-aws-ecr) after hearing about their capabilities. Here's the whole experience...</summary></entry><entry><title type="html">Cursor BugBot and Copilot Coding Agents: An AI-driven review and implementation workflow</title><link href="https://lgallardo.com/2025/06/08/coding-agents-bugbot/" rel="alternate" type="text/html" title="Cursor BugBot and Copilot Coding Agents: An AI-driven review and implementation workflow" /><published>2025-06-07T19:00:00-05:00</published><updated>2025-06-07T19:00:00-05:00</updated><id>https://lgallardo.com/2025/06/08/coding-agents-bugbot</id><content type="html" xml:base="https://lgallardo.com/2025/06/08/coding-agents-bugbot/">&lt;p&gt;&lt;img src=&quot;/assets/images/coding-agents-bugbot-ac817363-8710-4b8f-a6a5-15e47cae8f8c.png&quot; alt=&quot;BugBot and Copilot: AI Reviewers&quot; style=&quot;display:block; margin-left:auto; margin-right:auto; width:60%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Recently, while working on my Terraform modules, I had an idea: &lt;strong&gt;What about using BugBot to check Copilot‚Äôs Coding Agents?&lt;/strong&gt; With Copilot Coding Agents already helping automate PRs and refactors, I decided to give BugBot a try as an additional reviewer.&lt;/p&gt;

&lt;h2 id=&quot;the-experiment&quot;&gt;The Experiment&lt;/h2&gt;

&lt;p&gt;I assigned Copilot Coding Agents to implement new features and fixes in my repositories. Once the PRs were ready, I ran BugBot to review the changes. The results were fascinating:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/coding-agents-bugbot-2025-06-09_00-46.png&quot; alt=&quot;Copilot PR with BugBot review&quot; /&gt;&lt;/p&gt;

&lt;p&gt;BugBot quickly detected issues that Copilot‚Äôs own review had missed, especially around edge cases and variable usage. Its bug detection capabilities are on another level compared to Copilot‚Äôs built-in review features.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/coding-agents-bugbot-2025-06-09_00-47.png&quot; alt=&quot;BugBot detailed bug report&quot; /&gt;&lt;/p&gt;

&lt;p&gt;For example, BugBot flagged overly restrictive regex validation and unused variables in a Copilot-generated PR. It provided actionable feedback, which I then relayed to Copilot for fixes.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/coding-agents-bugbot2025-06-09_00-48.png&quot; alt=&quot;BugBot and Copilot: AI Reviewers&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;highlights&quot;&gt;Highlights&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;BugBot excels at bug detection:&lt;/strong&gt; It found subtle issues in Copilot Coding Agents‚Äô PRs, providing detailed explanations and suggestions.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Copilot Coding Agents excel at implementation:&lt;/strong&gt; They quickly propose and implement solutions, and can interpret and act on BugBot‚Äôs feedback.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;AI is not infallible:&lt;/strong&gt; Even with both tools, bugs or outdated code can slip through. For example, Copilot generated a workflow using a deprecated GitHub Action, and BugBot didn‚Äôt catch it either.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/coding-agents-bugbot-2025-06-09_01-01.png&quot; alt=&quot;Workflow error: Deprecated GitHub Action&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Combining Copilot Coding Agents and BugBot creates a powerful AI-driven review and implementation workflow. Each tool has its strengths: BugBot for deep bug detection, Copilot for rapid solution delivery. However, human oversight is still essential to catch edge cases and evolving platform changes.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; BugBot is a paid service for automated code reviews. My tests and experiments described here were conducted during the free trial period, which allowed me to evaluate its capabilities without incurring any cost.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/features/copilot&quot;&gt;GitHub Copilot&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cursor.so/bugbot&quot;&gt;Cursor BugBot&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lgallard/terraform-aws-ecr/pull/55&quot;&gt;feat: Add support for repository replication &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Luis Gallardo</name></author><category term="General" /><summary type="html">Recently, while working on my Terraform modules, I had an idea: What about using BugBot to check Copilot's Coding Agents? With Copilot Coding Agents a...</summary></entry><entry><title type="html">Using GitHub Copilot Background Agents</title><link href="https://lgallardo.com/2025/06/05/github-copilot-terraform-aws-backup/" rel="alternate" type="text/html" title="Using GitHub Copilot Background Agents" /><published>2025-06-04T19:00:00-05:00</published><updated>2025-06-04T19:00:00-05:00</updated><id>https://lgallardo.com/2025/06/05/github-copilot-terraform-aws-backup</id><content type="html" xml:base="https://lgallardo.com/2025/06/05/github-copilot-terraform-aws-backup/">&lt;!-- Add a relevant image here --&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/copilot-coding-agent.png&quot; alt=&quot;GitHub Copilot Background Agents&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Recently, I had the opportunity to try out GitHub Copilot Coding Agents (Background Agents) on one of my personal projects: the &lt;a href=&quot;https://github.com/lgallard/terraform-aws-backup&quot;&gt;terraform-aws-backup&lt;/a&gt; module. This module is designed to help users manage AWS Backup plans using Terraform.&lt;/p&gt;

&lt;h2 id=&quot;the-problem&quot;&gt;The Problem&lt;/h2&gt;

&lt;p&gt;A user opened &lt;a href=&quot;https://github.com/lgallard/terraform-aws-backup/issues/114&quot;&gt;an issue&lt;/a&gt; requesting support for multiple backup plans per vault. This required a significant refactor of the module, as it previously only supported a single plan per vault. I decided to assign the issue to Copilot to see how well it could handle a real-world infrastructure-as-code (IaC) refactor.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/copilot-assigned-by-lgallard.png&quot; alt=&quot;GitHub Issue Assignment&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-copilot-solution&quot;&gt;The Copilot Solution&lt;/h2&gt;

&lt;p&gt;Copilot Background Agents picked up the issue and proposed a pull request (&lt;a href=&quot;https://github.com/lgallard/terraform-aws-backup/pull/115&quot;&gt;PR #115&lt;/a&gt;) that introduced a new &lt;code class=&quot;highlighter-rouge&quot;&gt;plans&lt;/code&gt; variable (a map of maps) to support multiple backup plans. The PR included all necessary code changes, documentation updates, and maintained backward compatibility with the previous single-plan approach.&lt;/p&gt;

&lt;p&gt;I interacted with Copilot directly through GitHub, asking questions and requesting changes. For example, I verified backward compatibility and reported an edge case related to Terraform state migration. Copilot responded to my comments, addressed the issues, and updated the PR accordingly.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/copilot-pr.png&quot; alt=&quot;Copilot PR Conversation&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;highlights&quot;&gt;Highlights&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;End-to-end automation:&lt;/strong&gt; Most of the process happened within GitHub, with minimal human intervention.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Speed:&lt;/strong&gt; The entire refactor and review process took about 35 minutes, with Copilot handling the bulk of the work in just 13 minutes.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Device flexibility:&lt;/strong&gt; I managed the process from my iPad mini using Arc, without needing a local IDE.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Iterative feedback:&lt;/strong&gt; Copilot handled multiple rounds of feedback, including error reports and code adjustments.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;drawbacks&quot;&gt;Drawbacks&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Model selection:&lt;/strong&gt; There was no option to choose which AI model Copilot used for the task.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Testing required:&lt;/strong&gt; As with any automated code generation, manual testing and validation were necessary before merging.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Image handling:&lt;/strong&gt; Copilot could not read images pasted in comments, so error messages had to be provided as text.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;GitHub Copilot Background Agents proved to be a valuable tool for unattended, automation-friendly tasks like module refactoring. While it‚Äôs important to test and validate the generated code, Copilot can significantly accelerate development workflows, especially for infrastructure code.&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lgallard/terraform-aws-backup&quot;&gt;terraform-aws-backup module on GitHub&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://registry.terraform.io/modules/lgallard/backup/aws&quot;&gt;terraform-aws-backup module on Terraform Registry&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.github.com/en/copilot&quot;&gt;GitHub Copilot Background Agents&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Luis Gallardo</name></author><category term="General" /><summary type="html">Recently, I had the opportunity to try out GitHub Copilot Coding Agents (Background Agents) on one of my personal projects: the terraform-aws-backup m...</summary></entry><entry><title type="html">Anbernic 35xxH and Batocera</title><link href="https://lgallardo.com/2024/05/12/anbernic-35xxh-batocera/" rel="alternate" type="text/html" title="Anbernic 35xxH and Batocera" /><published>2024-05-11T19:00:00-05:00</published><updated>2024-05-11T19:00:00-05:00</updated><id>https://lgallardo.com/2024/05/12/anbernic-35xxh-batocera</id><content type="html" xml:base="https://lgallardo.com/2024/05/12/anbernic-35xxh-batocera/">&lt;p&gt;&lt;img src=&quot;/assets/images/anbernic-35xxh.jpg&quot; alt=&quot;Anbernic 35xxH&quot; style=&quot;display:block; margin-left:auto; margin-right:auto&quot; /&gt;&lt;br /&gt;
Today, the market is flooded with a variety of handheld devices for retro emulation, originating from several Chinese companies such as &lt;a href=&quot;https://www.goretroid.com/&quot; target=&quot;_blank&quot;&gt;Retroid&lt;/a&gt;, &lt;a href=&quot;https://powkiddy.com/&quot; target=&quot;_blank&quot;&gt;Powkiddy&lt;/a&gt;, and &lt;a href=&quot;https://anbernic.com/&quot; target=&quot;_blank&quot;&gt;Anbernic&lt;/a&gt;. These devices vary in form factors‚Äîranging from compact screens to more powerful computing capabilities and operating systems, some of which are open-source, while others are proprietary and maintained by the manufacturers themselves.&lt;/p&gt;

&lt;p&gt;After watching countless YouTube videos, comparing specifications, and exploring retro consoles on AliExpress priced under $100, I stumbled upon the &lt;strong&gt;Anbernic 35xxH&lt;/strong&gt;. This model, featuring a 3.5-inch screen, is developed by Anbernic. It is similar to the &lt;strong&gt;Anbernic 35xx Plus&lt;/strong&gt; but sports a horizontal orientation. The model name ‚Äò35xxH‚Äô indicates a 3.5-inch screen (‚Äò35xx‚Äô) and a horizontal layout (‚ÄòH‚Äô).&lt;/p&gt;

&lt;p&gt;As mentioned earlier, some operating systems are developed by the device manufacturers, like Anbernic, which offers a proprietary OS. While this OS serves its purpose, it is not without limitations. For example, the way games are displayed and organized can be confusing and cumbersome, and some emulators perform better on RetroArch than on the standalone emulators included with the OS.&lt;/p&gt;

&lt;p&gt;Seeking a more user-friendly interface, I turned to &lt;a href=&quot;https://batocera.org/&quot; target=&quot;_blank&quot;&gt;Batocera&lt;/a&gt;, an open-source project maintained by the community. Batocera provides a more intuitive and visually appealing user interface.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/batocera-anbernic-35xxh.jpg&quot; alt=&quot;Anbernic 35xxh&quot; style=&quot;display:block; margin-left:auto; margin-right:auto&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;For those interested in using Batocera on your &lt;strong&gt;Anbernic 35xxH&lt;/strong&gt;, there is a repository where you can download the Batocera image, called &lt;a href=&quot;https://github.com/rg35xx-cfw/rg35xx-cfw.github.io/discussions/104&quot; target=&quot;_blank&quot;&gt;Batocera Lite Beta for RG35XX Plus and RG35XX H&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;References&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.goretroid.com/&quot; target=&quot;_blank&quot;&gt;Retroid&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://powkiddy.com/&quot; target=&quot;_blank&quot;&gt;Powkiddy&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://anbernic.com/&quot; target=&quot;_blank&quot;&gt;Anbernic&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://batocera.org/&quot; target=&quot;_blank&quot;&gt;Batocera&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Luis Gallardo</name></author><category term="General" /><summary type="html">Today, the market is flooded with a variety of handheld devices for retro emulation, originating from several Chinese companies such as Retroid, Powki...</summary></entry><entry><title type="html">AWS (re)Certified Solutions Architect - Professional</title><link href="https://lgallardo.com/2023/12/18/aws-recertified-solutions-architect-professional/" rel="alternate" type="text/html" title="AWS (re)Certified Solutions Architect - Professional" /><published>2023-12-18T09:00:55-06:00</published><updated>2023-12-18T09:00:55-06:00</updated><id>https://lgallardo.com/2023/12/18/aws-certified-solutions-architect-professional-2023</id><content type="html" xml:base="https://lgallardo.com/2023/12/18/aws-recertified-solutions-architect-professional/">&lt;p&gt;&lt;img src=&quot;/assets/images/aws-csap-2023.jpg&quot; alt=&quot;OctoPrints&quot; style=&quot;display:block; margin-left:auto; margin-right:auto&quot; /&gt;&lt;br /&gt;
This article is to share my experience with the AWS Certified Solutions Architect - Professional (recertification) exam:&lt;/p&gt;

&lt;p&gt;If you‚Äôre taking the exam for the first time or, as in my case, seeking recertification, I recommend that you review the new content and check what has changed compared to the previous exam. Examples of these changes could be AWS SSO to AWS Identity Center. I also recommend that you familiarize yourself with new services such as AWS Elastic Disaster Recovery, EventBridge, Amazon Managed Services for Apache Flink, among others.&lt;/p&gt;

&lt;p&gt;There were 75 questions in 180 minutes. As is typical with AWS professional certifications, the exam is long and features extensive statements and lengthy answers. For those whose native language is not English, this can be confusing, so you will likely have to read several questions more than once (and their options).
If you‚Äôre taking the exam for the first time or, as in my case, seeking recertification, I recommend that you review the new content and check what has changed compared to the previous exam. Examples of these changes could be AWS SSO to AWS Identity Center. I also recommend that you familiarize yourself with new services such as AWS Elastic Disaster Recovery, EventBridge, Amazon Managed Services for Apache Flink, among others.
My recommendations for saving time in this exam are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Answer the easy questions quickly; don‚Äôt spend too much time pondering whether it‚Äôs the correct answer because it most likely is.&lt;/li&gt;
  &lt;li&gt;Mark the questions where you genuinely have doubts, so when reviewing, you can focus only on those. If time remains, then start reviewing the rest.&lt;/li&gt;
  &lt;li&gt;Mark multiple-choice questions for review, even if you think they are correct. It‚Äôs better to be 100% sure of the options because if you make a mistake in one, the answer can be considered incorrect.&lt;/li&gt;
  &lt;li&gt;Read the questions carefully because the statement contains the information that will help you eliminate options or choose the correct ones.&lt;/li&gt;
  &lt;li&gt;Remember that this is an Amazon certification, so always ask yourself which Amazon service is relevant.&lt;/li&gt;
  &lt;li&gt;Dismiss solutions that can be done at the OS level if an Amazon service provides it, only considering it when there is no other option.&lt;/li&gt;
  &lt;li&gt;Not everything is solved with Lambda + SQS, even if it seems correct. Review which options or services meet the requirements of the question and don‚Äôt be misled by options that initially seem correct.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you are interested in this certification, I recommend some links:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Online courses&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;For this exam, I stayed loyal to AWS A Cloud Guru, but to be honest, it seems to me that the content is covered superficially, and the course as it stands today looks like a Frankenstein creation. There are at least two instructors with different content formats, as if they had merged the best of Linux Academy‚Äôs courses with those of A Cloud Guru. Nonetheless, if you are interested, here it is available:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.pluralsight.com/courses/aws-certified-solutions-architect-professional-sap-c02&quot; target=&quot;_blank&quot;&gt;A Cloud Guru - AWS Certified Solutions Architect Professional&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;AWS Documentation&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://aws.amazon.com/whitepapers/&quot; target=&quot;_blank&quot;&gt;Whitepapers&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://aws.amazon.com/documentation/&quot; target=&quot;_blank&quot;&gt;Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://aws.amazon.com/faqs/&quot; target=&quot;_blank&quot;&gt;FAQs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Luis Gallardo</name></author><category term="General" /><summary type="html">This article is to share my experience with the AWS Certified Solutions Architect - Professional (recertification) exam:</summary></entry><entry><title type="html">OctoPrint with multiple 3D printers</title><link href="https://lgallardo.com/2022/09/25/octoprint-multiple-printers" rel="alternate" type="text/html" title="OctoPrint with multiple 3D printers" /><published>2022-09-24T19:00:00-05:00</published><updated>2022-09-24T19:00:00-05:00</updated><id>https://lgallardo.com/2022/09/25/octoprint-multiple-printers</id><content type="html" xml:base="https://lgallardo.com/2022/09/25/octoprint-multiple-printers">&lt;p&gt;&lt;img src=&quot;/assets/images/OctoPrint.jpg&quot; alt=&quot;OctoPrints&quot; style=&quot;display:block; margin-left:auto; margin-right:auto&quot; /&gt;&lt;br /&gt;
One of the most useful tools when managing a 3D printer is &lt;a href=&quot;https://octoprint.org&quot; target=&quot;_blank&quot;&gt;OctoPrint&lt;/a&gt;, since among several things it allows you to manage your printer from a web interface, as well as adding a lot of functionality (for example, monitoring and management of the printer through Telegram, plugins to generate timelapse videos of the prints, or even detect when there are spaghetti-like problems in our prints using another plugin with AI).&lt;/p&gt;

&lt;h2 id=&quot;multiple-printers&quot;&gt;Multiple printers&lt;/h2&gt;
&lt;p&gt;But what if we have more than one printer? Can &lt;strong&gt;OctoPrint&lt;/strong&gt; manage more than one printer?&lt;/p&gt;

&lt;p&gt;The short answer is: NO! The software itself is not designed for multiple printers, but you can find alternative ways to have more than one instance of &lt;strong&gt;OctoPrint&lt;/strong&gt; running on your device or computer.&lt;/p&gt;

&lt;p&gt;There are several ways to do this, for example you can &lt;a href=&quot;http://thomas-messmer.com/index.php/14-free-knowledge/howtos/79-setting-up- octoprint-for-multiple-printers&quot; target=&quot;_blank&quot;&gt;modify the OctoPi scripts to add more instances&lt;/a&gt;, create scripts that launch multiple instances of the same program, but the option I ended up using was Docker containers.&lt;/p&gt;

&lt;h2 id=&quot;raspberry-pi--ubuntu&quot;&gt;Raspberry Pi + Ubuntu&lt;/h2&gt;
&lt;p&gt;In my case I have a &lt;strong&gt;Raspberry Pi 4&lt;/strong&gt;, with 8 GB of RAM, more than enough to run multiple instances of &lt;strong&gt;OctoPrint&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;I originally had a specific operating system installed on my Raspberry called &lt;a href=&quot;https://github.com/guysoft/OctoPi&quot; target=&quot;_blank&quot;&gt;OctoPi&lt;/a&gt;, a Debian derivative with &lt;strong&gt;OctoPrint&lt;/strong&gt; as the main program that is launched when the Raspberry Pi is turned on, but as I wanted to use containers I decided to use Ubuntu, which general purposed distribution where you can surely find everything you need to work with containers.&lt;/p&gt;

&lt;h2 id=&quot;requirements-and-components&quot;&gt;Requirements and components:&lt;/h2&gt;
&lt;p&gt;For this setup I used the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Impresora 3D - Artillery Genius Pro&lt;/li&gt;
  &lt;li&gt;Impresora 3D - Artillery SideWinder X2&lt;/li&gt;
  &lt;li&gt;2x WebCam - Logitech C270 (one per printer)&lt;/li&gt;
  &lt;li&gt;Raspberry Pi 4 - 8G RAM&lt;/li&gt;
  &lt;li&gt;SD Card 64 GB&lt;/li&gt;
  &lt;li&gt;Ubuntu 22.04 LTS  ARM 64 bits&lt;/li&gt;
  &lt;li&gt;Docker 20.10.17&lt;/li&gt;
  &lt;li&gt;OctoPrint lastest (1.8.3)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;ubuntu-installation&quot;&gt;Ubuntu Installation&lt;/h2&gt;
&lt;p&gt;Nowadays is easier than ever to install &lt;strong&gt;Ubuntu&lt;/strong&gt; on the Raspberry Pi, you just have to download &lt;strong&gt;Raspberry Pi Imager,&lt;/strong&gt; which will generate the image on your SD card, select the operating system, which in this case is &lt;strong&gt;Ubuntu 22.04 LTS&lt;/strong&gt; and you‚Äôre done.  &lt;strong&gt;Raspberry Pi Imager&lt;/strong&gt; is avialable for Linux, Mac and Windows, so you can generate the image on the operating system that suits you best.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Raspberry-Pi-Imager.jpg&quot; alt=&quot;Raspberry Pi Imager&quot; /&gt;&lt;/p&gt;

&lt;p&gt;From this very software you will have the possibility to configure the password of the WiFi network in case you are using the Raspberry wirelessly, so you don‚Äôt need  to use a television set and a keyboard (headless), or manipulate the SD card to configure the networking. Since I‚Äôm using it headless, that‚Äôs what I did and then I connected via &lt;strong&gt;ssh&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/OctoPi-WiFi-Setting.jpg&quot; alt=&quot;WiFi Settings&quot; /&gt;&lt;/p&gt;

&lt;p&gt;For the headless setup the trick is to let the &lt;strong&gt;Ubuntu&lt;/strong&gt; initialization scripts run and then connect via ssh. Now if you see that you can‚Äôt connect via ssh you can look for an HDMI cable and a keyboard to check what might be going on.&lt;/p&gt;

&lt;h2 id=&quot;software-installation-on-ubuntu&quot;&gt;Software installation on Ubuntu&lt;/h2&gt;
&lt;p&gt;Apart from &lt;strong&gt;Docker&lt;/strong&gt; we are going to need &lt;strong&gt;docker-compose&lt;/strong&gt;, and the utilities that will help us install them.&lt;/p&gt;

&lt;h2 id=&quot;docker-and-docker-compose&quot;&gt;Docker and docker-compose&lt;/h2&gt;
&lt;p&gt;To install docker you need to download it using the script. You will need to loging in as the administrator user with the root account:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pi@octopi:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;su
root@octopi:~# 

root@octopi:~# apt install curl
root@octopi:~# curl &lt;span class=&quot;nt&quot;&gt;-sSL&lt;/span&gt; https://get.docker.com | sh

root@octopi:~# apt update
root@octopi:~# apt install docker-compose
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;octoprint-with-one-printer&quot;&gt;OctoPrint with one printer&lt;/h2&gt;
&lt;p&gt;The first thing you need is to create a folder for OctoPrint, and then go into it:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@octopi:~# mkdir octoprint
root@octopi:~# 
root@octopi:~# &lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;octoprint/
root@octopi:~/octoprint#
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let‚Äôs start with a printer, in this case I‚Äôll start with the &lt;code class=&quot;highlighter-rouge&quot;&gt;Artillery Genius Pro&lt;/code&gt;. For this you can create a folder that identifies this printer:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@octopi:~# mkdir geniuspro
root@octopi:~# chmod &lt;span class=&quot;nt&quot;&gt;-R&lt;/span&gt; 777 geniuspro/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It‚Äôs important to know the actual path because you‚Äôll use it later in the container definition along with the name of this folder. To do this, execute the following command:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@octopi:~# &lt;span class=&quot;nb&quot;&gt;pwd&lt;/span&gt;
/root/octoprint
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With this you can indicate the files of this first instance of OctoPrint will reside in &lt;code class=&quot;highlighter-rouge&quot;&gt;/root/octoprint/geniuspro&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now to configure the printer you need to use  &lt;code class=&quot;highlighter-rouge&quot;&gt;docker-compose&lt;/code&gt; so you need to create the &lt;code class=&quot;highlighter-rouge&quot;&gt;docker-compose.yml&lt;/code&gt; file with the following information:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;version: '2.4'

services:
  geniuspro:
    image: octoprint/octoprint
    restart: unless-stopped
    ports:
      - 5000:5000
      - 8080:8080
    devices:
      - /dev/ttyACM0:/dev/ttyACM0
      - /dev/video0:/dev/video0
    volumes:
      - /root/octoprint/geniuspro:/octoprint
    # uncomment the lines below to ensure camera streaming is enabled when
    # you add a video device
    environment:
      - ENABLE_MJPG_STREAMER=true
      - CAMERA_DEV=/dev/video0
      - MJPG_STREAMER_INPUT=&quot;-y -n -r 1280x960 -f 30
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This file defines various things related to OctoPrint, such as the webcam and the printer itself. For example,  &lt;code class=&quot;highlighter-rouge&quot;&gt;image&lt;/code&gt;  indicates which Docker image to use for the &lt;code class=&quot;highlighter-rouge&quot;&gt;geniuspro&lt;/code&gt; service.&lt;/p&gt;

&lt;p&gt;Notice the ports definitions, where &lt;code class=&quot;highlighter-rouge&quot;&gt;5000&lt;/code&gt; will be used for the web interface and &lt;code class=&quot;highlighter-rouge&quot;&gt;8080&lt;/code&gt; for webcam streaming video.&lt;/p&gt;

&lt;p&gt;On the other hand, the printer is defined as a device in &lt;code class=&quot;highlighter-rouge&quot;&gt;/dev/ttyACM0&lt;/code&gt;, and the webcam in &lt;code class=&quot;highlighter-rouge&quot;&gt;/dev/video0&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Something to keep in mind and that differs from the &lt;a href=&quot;https://docs.google.com/document/d/1aU7LGYAe6r45LqEBQ8opuXCiNKeJl3XrPTrobvEvdOM/edit&quot; target=&quot;_blaÔøºnk&quot;&gt;example on which I based&lt;/a&gt;, is that the streamer is now part of the Docker image and is served on port &lt;code class=&quot;highlighter-rouge&quot;&gt;8080&lt;/code&gt;, so there is no need to have a separate definition of another Docker image pointing to the streamer.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;volumes&lt;/code&gt;  has the reference to the printer directory that you had created as &lt;code class=&quot;highlighter-rouge&quot;&gt;/root/octoprint/geniuspro&lt;/code&gt;, which will be mapped into the container as the &lt;code class=&quot;highlighter-rouge&quot;&gt;/octoprint&lt;/code&gt; folder. That is, when we launch the container all the OctoPrint files for this printer will be in the &lt;code class=&quot;highlighter-rouge&quot;&gt;/root/octoprint/geniuspro&lt;/code&gt; path of the operating system.&lt;/p&gt;

&lt;p&gt;Finally, &lt;code class=&quot;highlighter-rouge&quot;&gt;environment&lt;/code&gt; has the streamer parameters, like webcam device from the container. In this case both the OS and the container match the path &lt;code class=&quot;highlighter-rouge&quot;&gt;/dev/video0&lt;/code&gt;. Here you also need to provide you webcam parameters, in my case I indicated that the resolution is 1280x960 at 30 frames per second, which is what corresponds to my Logitech C270. For other models you can consult the &lt;a href=&quot;https://community.octoprint.org/t/usb-webcams-known-to-work-with-mjpg-streamer/21149&quot;&gt;supported cameras list page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once the &lt;code class=&quot;highlighter-rouge&quot;&gt;docker-compose.yml&lt;/code&gt; file has been created with the information shown above, all you have to do is start the service with Docker:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@octopi:~/octoprint# docker-compose up -d
  
Creating octoprint_geniuspro_1 ... done
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With this we can access the OctoPrint web interface from the Raspberry Pi on the port that we had indicated,  in my case the url is http://192.168.68.102:5000:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/octoprint-multi-web.jpg&quot; alt=&quot;OctoPrint Web 1&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;adding-a-second-printer&quot;&gt;Adding a second printer&lt;/h2&gt;

&lt;p&gt;To add a second printer, you just have to replicate the configuration you had before, but specifying the new printer and the corresponding video camera. So for my Artillery Sidewinder X2 this would be:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;version: '2.4'

services:
  geniuspro:
    image: octoprint/octoprint
    restart: unless-stopped
    ports:
      - 5000:5000
      - 8080:8080
    devices:
      - /dev/ttyACM0:/dev/ttyACM0
      - /dev/video0:/dev/video0
    volumes:
      - /root/octoprint/geniuspro:/octoprint
    # uncomment the lines below to ensure camera streaming is enabled when
    # you add a video device
    environment:
      - ENABLE_MJPG_STREAMER=true
      - CAMERA_DEV=/dev/video0
      - MJPG_STREAMER_INPUT=&quot;-y -n -r 1280x960 -f 30
 
  sidewinder_x2:
    image: octoprint/octoprint
    restart: unless-stopped
    ports:
      - 5000:5000
      - 8080:8080
    devices:
      - /dev/ttyACM1:/dev/ttyACM0
      - /dev/video2:/dev/video0
    volumes:
      - /root/octoprint/geniuspro:/octoprint
    # uncomment the lines below to ensure camera streaming is enabled when
    # you add a video device
    environment:
      - ENABLE_MJPG_STREAMER=true
      - CAMERA_DEV=/dev/video0
      - MJPG_STREAMER_INPUT=&quot;-y -n -r 1280x960 -f 30

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Take into account the phycal printer is identified as &lt;code class=&quot;highlighter-rouge&quot;&gt;/dev/ttyACM1&lt;/code&gt; in the Raspberry , but the container internally it will be see it as &lt;code class=&quot;highlighter-rouge&quot;&gt;/dev/ttyACM0&lt;/code&gt;. The same goes for the video camera, where it is physically identified as &lt;code class=&quot;highlighter-rouge&quot;&gt;/dev/video2&lt;/code&gt; but internally the container will see it as &lt;code class=&quot;highlighter-rouge&quot;&gt;/dev/video0&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Once the configuration has been created, the container must be run as follows:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@octopi:~/octoprint# docker-compose up -d
  
octoprint_geniuspro_1 is up-to-date
Creating octoprint_sidewinderx2_1 ... done
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This will now allow access to the second instance of OctoPrint on port 5001:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/octoprint-multi-web2.jpg&quot; alt=&quot;OctoPrint Web 2&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;how-to-differentiate-printers&quot;&gt;How to differentiate printers?&lt;/h2&gt;
&lt;p&gt;In the example above I used the devices &lt;code class=&quot;highlighter-rouge&quot;&gt;/dev/ttyACM0&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;/dev/ttyACM1&lt;/code&gt; to reference my first printer, the Artillery Genius Pro, and my second printer, the Artillery SideWinder X2, but the operating system not always takes that order, since it will depend on which one you had turned on first. In order to identify the printers regardless of the connection order we can create a symbolic link using &lt;code class=&quot;highlighter-rouge&quot;&gt;udev&lt;/code&gt; with the manufacturer and product information.&lt;/p&gt;

&lt;p&gt;For this, you have first list the USB devices:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@octopi:~/octoprint# lsusb
Bus 003 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub
Bus 002 Device 001: ID 1d6b:0003 Linux Foundation 3.0 root hub
Bus 001 Device 004: ID 046d:0825 Logitech, Inc. Webcam C270
Bus 001 Device 003: ID 046d:0825 Logitech, Inc. Webcam C270
Bus 001 Device 015: ID 0483:5740 STMicroelectronics Virtual COM Port
Bus 001 Device 016: ID 0483:5740 STMicroelectronics Virtual COM Port
Bus 001 Device 002: ID 2109:3431 VIA Labs, Inc. Hub
Bus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There are two &lt;strong&gt;STMicroelectronics Virtual COM Port&lt;/strong&gt; devices here, corresponding to the two printers, but which is which? We are going to ask for the detail of these devices:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; root@octopi:~/octoprint# lsusb -v -d 0483:5740

Bus 001 Device 015: ID 0483:5740 STMicroelectronics Virtual COM Port
Device Descriptor:
  bLength                18
  bDescriptorType         1
  bcdUSB               2.00
  bDeviceClass            2 Communications
  bDeviceSubClass         2 Abstract (modem)
  bDeviceProtocol         0
  bMaxPacketSize0        64
  idVendor           0x0483 STMicroelectronics
  idProduct          0x5740 Virtual COM Port
  bcdDevice            0.00
  iManufacturer           1 STMicroelectronics
  iProduct                2 ARTILLERY_RUBY CDC in FS Mode
  iSerial                 3 386F39543538  
...
  
Bus 001 Device 016: ID 0483:5740 STMicroelectronics Virtual COM Port
Device Descriptor:
  bLength                18
  bDescriptorType         1
  bcdUSB               2.00
  bDeviceClass            2 Communications
  bDeviceSubClass         2 Abstract (modem)
  bDeviceProtocol         0
  bMaxPacketSize0        64
  idVendor           0x0483 STMicroelectronics
  idProduct          0x5740 Virtual COM Port
  bcdDevice            0.00
  iManufacturer           1 STMicroelectronics
  iProduct                2 ARTILLERY_RUBY CDC in FS Mode
  iSerial                 3 3594398F3538  
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;What differentiates one printer from another is the serial number of the device. Since the Artillery Genius Pro was initially mapped to &lt;code class=&quot;highlighter-rouge&quot;&gt;/dev/ttyACM0&lt;/code&gt;, we can check what its serial number is:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@octopi:~/octoprint# udevadm info -a -n /dev/ttyACM0 | grep serial
    ATTRS{serial}==&quot;3594398F3538&quot;
    ATTRS{serial}==&quot;0000:01:00.0&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now to see the serial code of the Artillery Sidewinder X2 you have to consult the device &lt;code class=&quot;highlighter-rouge&quot;&gt;/dev/ttyACM1&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
root@octopi:~/octoprint# udevadm info -a -n /dev/ttyACM1 | grep serial
    ATTRS{serial}==&quot;386F39543538&quot;
    ATTRS{serial}==&quot;0000:01:00.0&quot; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For &lt;code class=&quot;highlighter-rouge&quot;&gt;udev&lt;/code&gt; to recognize these rules we must create the following file &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/udev/rules.d/40-printers.rules&lt;/code&gt; , with this content:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; # Genius Pro
KERNEL==&quot;ttyACM[0-9]*&quot;, SUBSYSTEM==&quot;tty&quot;, ATTRS{idVendor}==&quot;0483&quot;, ATTRS{idProduct}==&quot;5740&quot;, ATTRS{serial}==&quot;3594398F3538&quot;, SYMLINK=&quot;ttyGeniusPro&quot;

# Sidewinder X2
KERNEL==&quot;ttyACM[0-9]*&quot;, SUBSYSTEM==&quot;tty&quot;, ATTRS{idVendor}==&quot;0483&quot;, ATTRS{idProduct}==&quot;5740&quot;, ATTRS{serial}==&quot;386F39543538&quot;, SYMLINK=&quot;ttySidewinderX2&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then &lt;code class=&quot;highlighter-rouge&quot;&gt;udev&lt;/code&gt; must be restarted to take these changes:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@octopi:~/octoprint# udevadm control --reload-rules &amp;amp;&amp;amp; udevadm trigger
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This way the printers will be mapped as follows:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@octopi:~/octoprint# ls -l  /dev/tty{GeniusPro,Sidewinder}*
lrwxrwxrwx 1 root root 7 Aug 22 21:10 /dev/ttyGeniusPro -&amp;gt; ttyACM0
lrwxrwxrwx 1 root root 7 Aug 22 21:10 /dev/ttySidewinderX2 -&amp;gt; ttyACM1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So the Docker configuration can be modified to reflect these changes:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;version: '2.4'

services:
  geniuspro:
    image: octoprint/octoprint
    restart: unless-stopped
    ports:
      - 5000:5000
      - 8080:8080
    devices:
      - /dev/ttyGeniusPro:/dev/ttyACM0
      - /dev/video0:/dev/video0
    volumes:
      - /root/octoprint/geniuspro:/octoprint
    # uncomment the lines below to ensure camera streaming is enabled when
    # you add a video device
    environment:
      - ENABLE_MJPG_STREAMER=true
      - CAMERA_DEV=/dev/video0
      - MJPG_STREAMER_INPUT=&quot;-y -n -r 1280x960 -f 30

  sidewinderx2:
    image: octoprint/octoprint
    restart: unless-stopped
    ports:
      - 5001:5000
      - 8081:8080
    devices:
      - /dev/ttySidewinderX2:/dev/ttyACM0
      - /dev/video2:/dev/video0
    volumes:
      - /root/octoprint/sidewinderx2:/octoprint
    # uncomment the lines below to ensure camera streaming is enabled when
    # you add a video device
    environment:
      - ENABLE_MJPG_STREAMER=true
      - CAMERA_DEV=/dev/video0
      - MJPG_STREAMER_INPUT=&quot;-y -n -r 1280x960 -f 30  

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;webcams&quot;&gt;Webcams&lt;/h2&gt;
&lt;p&gt;Unlike printers which have different serial numbers, I have two &lt;strong&gt;Logitech C270&lt;/strong&gt; webcams that are exactly the same model. How can we  differente them? How can we make the OS to take the right camera?&lt;/p&gt;

&lt;p&gt;Again we do the analysis with &lt;code class=&quot;highlighter-rouge&quot;&gt;lsusb&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@octopi:~/octoprint# lsusb
Bus 003 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub
Bus 002 Device 001: ID 1d6b:0003 Linux Foundation 3.0 root hub
Bus 001 Device 004: ID 046d:0825 Logitech, Inc. Webcam C270
Bus 001 Device 003: ID 046d:0825 Logitech, Inc. Webcam C270
Bus 001 Device 015: ID 0483:5740 STMicroelectronics Virtual COM Port
Bus 001 Device 016: ID 0483:5740 STMicroelectronics Virtual COM Port
Bus 001 Device 002: ID 2109:3431 VIA Labs, Inc. Hub
Bus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Both cameras are on the same bus but identified as different USB devices, which we can take advantage of. In this case we will not use the product id to differentiate them but the USB device id. We‚Äôll be referencing the &lt;code class=&quot;highlighter-rouge&quot;&gt;video4linux&lt;/code&gt; subsystem instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;tty&lt;/code&gt;, so we‚Äôll be using &lt;code class=&quot;highlighter-rouge&quot;&gt;KERNELS&lt;/code&gt; instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;KERNEL&lt;/code&gt; to differentiate cameras. For example, to find out which USB device the camera in &lt;code class=&quot;highlighter-rouge&quot;&gt;/dev/video0&lt;/code&gt; is on, we can run the following:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@octopi:~/octoprint# udevadm info -a -p  $(udevadm info -q path -n /dev/video0) | grep KERNELS
    KERNELS==&quot;1-1.4:1.0&quot;
    KERNELS==&quot;1-1.4&quot;
    KERNELS==&quot;1-1&quot;
    KERNELS==&quot;usb1&quot;
    KERNELS==&quot;0000:01:00.0&quot;
    KERNELS==&quot;0000:00:00.0&quot;
    KERNELS==&quot;pci0000:00&quot;
    KERNELS==&quot;fd500000.pcie&quot;
    KERNELS==&quot;scb&quot;
    KERNELS==&quot;platform&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For the other camera we do the same:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@octopi:~/octoprint# udevadm info -a -p  $(udevadm info -q path -n /dev/video2) | grep KERNELS
    KERNELS==&quot;1-1.3:1.0&quot;
    KERNELS==&quot;1-1.3&quot;
    KERNELS==&quot;1-1&quot;
    KERNELS==&quot;usb1&quot;
    KERNELS==&quot;0000:01:00.0&quot;
    KERNELS==&quot;0000:00:00.0&quot;
    KERNELS==&quot;pci0000:00&quot;
    KERNELS==&quot;fd500000.pcie&quot;
    KERNELS==&quot;scb&quot;
    KERNELS==&quot;platform&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now with this information we can modify the &lt;code class=&quot;highlighter-rouge&quot;&gt;udev&lt;/code&gt; rules as follows:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Genius Pro
KERNEL==&quot;ttyACM[0-9]*&quot;, SUBSYSTEM==&quot;tty&quot;, ATTRS{idVendor}==&quot;0483&quot;, ATTRS{idProduct}==&quot;5740&quot;, ATTRS{serial}==&quot;3594398F3538&quot;, SYMLINK=&quot;ttyGeniusPro&quot;
SUBSYSTEM==&quot;video4linux&quot;, KERNELS==&quot;1-1.3&quot;, ATTRS{idVendor}==&quot;046d&quot;, ATTRS{idProduct}==&quot;0825&quot;, SYMLINK=&quot;videoGeniusPro&quot;

# Sidewinder X2
KERNEL==&quot;ttyACM[0-9]*&quot;, SUBSYSTEM==&quot;tty&quot;, ATTRS{idVendor}==&quot;0483&quot;, ATTRS{idProduct}==&quot;5740&quot;, ATTRS{serial}==&quot;386F39543538&quot;, SYMLINK=&quot;ttySidewinderX2&quot;
SUBSYSTEM==&quot;video4linux&quot;, KERNELS==&quot;1-1.4&quot;, ATTRS{idVendor}==&quot;046d&quot;, ATTRS{idProduct}==&quot;0825&quot;, SYMLINK=&quot;videoSidewinderX2&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Remember to reset the &lt;code class=&quot;highlighter-rouge&quot;&gt;udev&lt;/code&gt; rules with:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@octopi:~/octoprint# udevadm control --reload-rules &amp;amp;&amp;amp; udevadm trigger
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So now we have the cameras mapped to &lt;code class=&quot;highlighter-rouge&quot;&gt;/dev/videoGeniusPro&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;/dev/videoSidewinderX2&lt;/code&gt; respectively. Now we can modify the &lt;strong&gt;docker-compose.yml&lt;/strong&gt; file to take this new configuration:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;version: '2.4'

services:
  geniuspro:
    image: octoprint/octoprint
    restart: unless-stopped
    ports:
      - 5000:5000
      - 8080:8080
    devices:
      - /dev/ttyGeniusPro:/dev/ttyACM0
      - /dev/videoGeniusPro:/dev/video0
    volumes:
      - /root/octoprint/geniuspro:/octoprint
    # uncomment the lines below to ensure camera streaming is enabled when
    # you add a video device
    environment:
      - ENABLE_MJPG_STREAMER=true
      - CAMERA_DEV=/dev/video0
      - MJPG_STREAMER_INPUT=&quot;-y -n -r 1280x960 -f 30

  sidewinderx2:
    image: octoprint/octoprint
    restart: unless-stopped
    ports:
      - 5001:5000
      - 8081:8080
    devices:
      - /dev/ttySidewinderX2:/dev/ttyACM0
      - /dev/videoSidewinderX2:/dev/video0
    volumes:
      - /root/octoprint/sidewinderx2:/octoprint
    # uncomment the lines below to ensure camera streaming is enabled when
    # you add a video device
    environment:
      - ENABLE_MJPG_STREAMER=true
      - CAMERA_DEV=/dev/video0
      - MJPG_STREAMER_INPUT=&quot;-y -n -r 1280x960 -f 30
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;performance-with-two-instances-of-octoprint&quot;&gt;Performance with two instances of OctoPrint&lt;/h2&gt;
&lt;p&gt;Probably you are wondering about the consumption of these containers in the operating system and if the Raspberry can handle it. Here is an image of &lt;code class=&quot;highlighter-rouge&quot;&gt;htop&lt;/code&gt; with the two containers above printing to each of the printers at the same time.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/octoprint-htop.jpg&quot; alt=&quot;htop&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see the Raspberry has a lot of resources available, since of the 8GB of RAM it is only consuming 0.5 GB including the operating system. From this we can draw two conclusions: the first one is that more printers can be added without problems, the only limit is the number of USB ports offered by the Raspberry (4 in my model), but you could add a USB hub to add more ports; and the second conclusion is that for two printers you could use a Raspberry with less RAM, for example 2 GB or 4 GB, and thus you would save a little.&lt;/p&gt;

&lt;h2 id=&quot;what-does-the-raspberry-pi-and-printers-look-like&quot;&gt;What does the Raspberry Pi and printers look like?&lt;/h2&gt;
&lt;p&gt;To finish this article I leave you a photo of my printers connected to the RaspBerry Pi:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3dprinters.jpg&quot; alt=&quot;3D printers&quot; /&gt;&lt;/p&gt;

&lt;p&gt;On the smaller printer you can see a small gray box that is the Raspberry Pi, next to the two web cameras.&lt;/p&gt;

&lt;h1 id=&quot;references&quot;&gt;References&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://octoprint.org&quot; target=&quot;_blank&quot;&gt;OctoPrint&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/guysoft/OctoPi&quot; target=&quot;_blank&quot;&gt;OctoPi&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://thomas-messmer.com/index.php/14-free-knowledge/howtos/79-setting-up-octoprint-for-multiple-printers&quot; target=&quot;_blank&quot;&gt;Setting up OctoPrint on a Raspberry Pi for multiple printers&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://youtu.be/LcA9o6OGfEg&quot; target=&quot;_blank&quot;&gt;Installing OctoPrint using Docker in Linux (video tutorial)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.google.com/document/d/1aU7LGYAe6r45LqEBQ8opuXCiNKeJl3XrPTrobvEvdOM/edit&quot; target=&quot;_blank&quot;&gt;Installing OctoPrint using Docker in Linux (instructions)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://community.octoprint.org/t/usb-webcams-known-to-work-with-mjpg-streamer/21149&quot; target=&quot;_blaÔøºnk&quot;&gt;USB webcams known to work with mjpg-streamer&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://askubuntu.com/questions/49910/how-to-distinguish-between-identical-usb-to-serial-adapters&quot; target=&quot;_blank&quot;&gt;How to distinguish between identical USB-to-serial adapters?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://unix.stackexchange.com/questions/424887/udev-rule-to-discern-2-identical-webcams-on-linux&quot; target=&quot;_blank&quot;&gt;Udev Rule to discern 2 identical webcams on Linux&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Luis Gallardo</name></author><category term="General" /><summary type="html">One of the most useful tools when managing a 3D printer is OctoPrint, since among several things it allows you to manage your printer from a web inter...</summary></entry><entry><title type="html">PaperLike Pencil Grips</title><link href="https://lgallardo.com/2022/04/17/paperlike-pencil-grips" rel="alternate" type="text/html" title="PaperLike Pencil Grips" /><published>2022-04-17T00:00:00-05:00</published><updated>2022-04-17T00:00:00-05:00</updated><id>https://lgallardo.com/2022/04/17/paperlike-pencil-grips</id><content type="html" xml:base="https://lgallardo.com/2022/04/17/paperlike-pencil-grips">&lt;p&gt;&lt;img src=&quot;/assets/images/PaperLike-Pencil-Grip.jpg&quot; alt=&quot;PaperLike Pencil Grips&quot; style=&quot;display:block; margin-left:auto; margin-right:auto&quot; /&gt;&lt;br /&gt;
I‚Äôve been using my iPad for a while to take notes with the Apple Pencil and I decided to write this article to tell you about a product that has pleasantly surprised me and which I think is an excellent improvement to consider: the &lt;strong&gt;Paper Like Pencil Grips&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;It may have happened to you that when using the Apple Pencil for a long time, your hand gets tired? This is common even with traditional pencils, and for this there was already a solution, the classic grips adapted to the pencil to improve the posture of the fingers when writing. This is what the PaperLike team ended up designing, but for the Apple Pencil.&lt;/p&gt;

&lt;p&gt;You‚Äôll say that they are simple grips and probably you think you can use traditional grips to adapt them to the Apple Pencil‚Ä¶Yes, for little money you can put a generic grip on it but there‚Äôre a couple of things that you should consider, that the PaperLike team has already solved and that you won‚Äôt have with a generic product:&lt;/p&gt;

&lt;h2 id=&quot;apple-pencils-magnetic-charge&quot;&gt;Apple Pencil‚Äôs magnetic charge&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/Grip-on-iPad.jpg&quot; alt=&quot;Blink config&quot; style=&quot;display:block; margin-left:auto; margin-right:auto&quot; /&gt;&lt;/p&gt;

&lt;p&gt;They achieve this thanks to the fact their grips are specially designed for the Apple Pencil, since they have the shape of the pencil, and the side used for magnetic charging is slightly thinner.&lt;/p&gt;

&lt;h2 id=&quot;the-posture-of-the-fingers&quot;&gt;The posture of the fingers&lt;/h2&gt;
&lt;p&gt;The PaperLike guys took into account two edge cases: precision and prolonged periods of use. Yes, two different pencil grips come in the envelop: The first is aimed at having maximum precision when grabbing the pencil, for example when you need fine details when drawing. The second one is designed to help those who take notes for a long time, ideal for university students.&lt;/p&gt;

&lt;p&gt;In my case, I really enjoy the grip for long session using (although I left behind my university yeas a long time ago), but I am sure this will be very useful for students, and for artists (professional or not) it will be help them  to have more precise lines when making their creations.&lt;/p&gt;

&lt;p&gt;It is definitely an improvement that undoubtedly changes the experience of using the iPad and the Apple Pencil.&lt;/p&gt;

&lt;h2 id=&quot;double-tap-funtion&quot;&gt;Double tap funtion&lt;/h2&gt;
&lt;p&gt;The Apple Pencil has a second function that is activated by double-tapping the flat part of the pencil. With a generic grip there‚Äôs no way to double tap. The PaperLike Pencil Grips achieves this with the thinnest part of the grip. But I must comment that to use it you have to turn the pencil to be able to double tap. I use this a lot in &lt;strong&gt;GoodNotes 5&lt;/strong&gt;, and it‚Äôs not that natural. In fact, the founder of PaperLike in the How-To video comments that one option is to use the grip with that part facing up, but I think it loses its grace becuase the grip‚Äôs shape was designed for the index fingers and the thumb. It seemed to me that the best option is to get used to turning the pencil before doing the double tap, and turning it  back to continue writing.&lt;/p&gt;

&lt;h1 id=&quot;the-packaging&quot;&gt;The packaging&lt;/h1&gt;
&lt;p&gt;Finally, I would like to highlight something pleasant, which is the packaging in which it came. As I bought the grips at an early stage, they came in a paper envelope, which in fact they make clear is not the final packaging for the product.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/PaperLike-Pencil-Grips-Envelop.jpg&quot; alt=&quot;PaperLike Pencil Grips Packing&quot; style=&quot;display:block; margin-left:auto; margin-right:auto&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In particular, it doesn‚Äôt bother me at all and in fact I would even say that it should be the final version, a simple and environmentally friendly presentation. The only thing that would suggest to improve is that the material of the envelope, it should be a little harder so that it can withstand the onslaught of the trip, or in any case they should send them in ‚Äúfragile‚Äù correspondence, since the shipment was not at all economical (‚Ç¨ 39.99). In my case, mine arrived in that envelope a little wrinkled, and the contents also wrinkled.&lt;/p&gt;

&lt;p&gt;Other details that I liked were the thank you note they place on the packaging, handwritten by the founder of PaperLike (and then printed industrially), as well as a very nice sticker that they add from the community of artists who use their products.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/PaperLike-Pencil-Grips-thanks.jpg&quot; alt=&quot;PaperLike Pencil Grips thanking note&quot; style=&quot;display:block; margin-left:auto; margin-right:auto&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/PaperLike-Pencil-Grips-Sticker.jpg&quot; alt=&quot;PaperLike Pencil Grips sticker gift&quot; style=&quot;display:block; margin-left:auto; margin-right:auto&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;where-to-buy-the-paperlike-grips&quot;&gt;Where to buy the PaperLike Grips?&lt;/h1&gt;
&lt;p&gt;As I mentioned, they are at an early stage, so at the moment the only place you will be able to buy them in PaperLike‚Äôs store, got to &lt;a href=&quot;https://paperlike.com/collections/ipad-accessories&quot; target=&quot;_blank&quot;&gt;iPad accessories&lt;/a&gt; , here the &lt;a href=&quot;https://paperlike.com/collections/ipad-accessories/products/pencil-grip-set&quot; target=&quot;_blank&quot;&gt;PaperLike Pencil Grips are available.&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;If you need a grip for your Apple Pencil, keep in mind this option offered by the PaperLike guys, which will undoubtedly improve your user experience on your iPad  significantly.&lt;/p&gt;

&lt;h2 id=&quot;disclaimer&quot;&gt;Disclaimer&lt;/h2&gt;
&lt;p&gt;I wrote this post to share my experience with the PaperLike pencil grips, and I did not receive any sponsorship or have any profit or participation in their sales.&lt;/p&gt;

&lt;h1 id=&quot;references&quot;&gt;References&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://paperlike.com&quot; target=&quot;_blank&quot;&gt;PaperLike page&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://paperlike.com/collections/ipad-accessories&quot; target=&quot;_blank&quot;&gt;iPad Accessories&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://paperlike.com/collections/ipad-accessories/products/pencil-grip-set&quot; target=&quot;_blank&quot;&gt;PaperLike Pencil Grips&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Luis Gallardo</name></author><category term="General" /><summary type="html">I've been using my iPad for a while to take notes with the Apple Pencil and I decided to write this article to tell you about a product that has pleas...</summary></entry><entry><title type="html">iPad Pro as portable workstation</title><link href="https://lgallardo.com/2022/01/25/ipad-pro-as-a-portable-workstation/" rel="alternate" type="text/html" title="iPad Pro as portable workstation" /><published>2022-01-24T18:00:00-06:00</published><updated>2022-01-24T18:00:00-06:00</updated><id>https://lgallardo.com/2022/01/25/ipad-pro-as-a-portable-workstation</id><content type="html" xml:base="https://lgallardo.com/2022/01/25/ipad-pro-as-a-portable-workstation/">&lt;p&gt;&lt;img src=&quot;/assets/images/ipad-pro-2021.jpg&quot; alt=&quot;iPad Pro&quot; style=&quot;display:block; margin-left:auto; margin-right:auto&quot; /&gt;&lt;br /&gt;
It‚Äôs been a while since I posted on the blog, first because I couldn‚Äôt find something interesting to share and second because there wasn‚Äôt much spare time (It‚Äôs not that now there‚Äôs a lot of time to spare but well, one make some time to write a few lines).&lt;/p&gt;

&lt;p&gt;The truth is I recently got an iPad Pro 11‚Äù and among the things I tried was the possibility to use it as a light work equipment, that is, a computer that I can have on hand on my bedside table without it being a complete computer.&lt;/p&gt;

&lt;p&gt;While the iPad has many advantages and things that I really liked, it seems the term ‚ÄúPro‚Äù is not enough to have a complete terminal as you can find in an operating system or to have a functional &lt;a href=&quot;https://youtu.be/LrLDKYFyLMM&quot; target=&quot;_blank&quot;&gt;virtual machine&lt;/a&gt;, so I decided to investigate if there is an option to use it as a client that connects somewhere else where I can have access to a complete operating system.&lt;/p&gt;

&lt;p&gt;In fact, I read an &lt;a href=&quot;https://arslan.io/2019/01/07/using-the-ipad-pro-as-my-development-machine/&quot; target=&quot;_blank&quot;&gt;article&lt;/a&gt; that suggested using a Digital Ocean Droplet to have a virtual machine in the cloud and from there be able to work. This option is not bad, but having a workstation at home I didn‚Äôt see the need to go to the cloud.&lt;/p&gt;

&lt;p&gt;Following some of these suggestions I ended up installing &lt;strong&gt;Blink Shell&lt;/strong&gt; that comes with &lt;code class=&quot;highlighter-rouge&quot;&gt;mosh&lt;/code&gt; support, and using &lt;code class=&quot;highlighter-rouge&quot;&gt;tmux&lt;/code&gt; on my remote Linux laptop I was able to achieve this. Below I explain the details of this configuration.&lt;/p&gt;

&lt;h1 id=&quot;blink-shell-ssh--mosh&quot;&gt;Blink Shell (ssh / mosh)&lt;/h1&gt;

&lt;p&gt;The first thing I had to look for was a decent &lt;code class=&quot;highlighter-rouge&quot;&gt;ssh&lt;/code&gt; client for iPad. &lt;strong&gt;&lt;a href=&quot;https://blink.sh&quot; target=&quot;_blank&quot;&gt;Blink Shell&lt;/a&gt;&lt;/strong&gt; appeared as recurring recommendation on Internet articles. At first, I didn‚Äôt like the fact you have to buy it without a trial but since there were several recommendations I gave it a try (USD 19.99 at the date of publication of this post).&lt;/p&gt;

&lt;p&gt;I have to admit  &lt;strong&gt;Blink Shell&lt;/strong&gt; is very, very good, it‚Äôs  designed for mobile devices and has support for &lt;code class=&quot;highlighter-rouge&quot;&gt;mosh&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;mosh&quot;&gt;Mosh&lt;/h2&gt;
&lt;p&gt;Maybe you are wondering as I did, What is &lt;code class=&quot;highlighter-rouge&quot;&gt;mosh&lt;/code&gt;?  The definition from the &lt;code class=&quot;highlighter-rouge&quot;&gt;mosh&lt;/code&gt; page says:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Remote terminal application that allows roaming, supports intermittent connectivity, and provides intelligent local echo and line editing of user keystrokes.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Do you still not understand what &lt;code class=&quot;highlighter-rouge&quot;&gt;mosh&lt;/code&gt; is for as it happened to me? It‚Äôs like &lt;code class=&quot;highlighter-rouge&quot;&gt;screen&lt;/code&gt; but without having to learn commands to create and manage sessions, it also uses &lt;code class=&quot;highlighter-rouge&quot;&gt;ssh&lt;/code&gt; under the hood. In other words, you will have the possibility to continue working on your session where you left it off, or if for example your connection was cut and you manage to connect again to another network.&lt;/p&gt;

&lt;p&gt;As under the hood  it uses &lt;code class=&quot;highlighter-rouge&quot;&gt;ssh&lt;/code&gt;, in order to use &lt;code class=&quot;highlighter-rouge&quot;&gt;mosh&lt;/code&gt; the syntax is practically the same. Therefore if you used to connect to a server using &lt;code class=&quot;highlighter-rouge&quot;&gt;ssh&lt;/code&gt; like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ssh lgallard@192.168.1.65
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now with &lt;code class=&quot;highlighter-rouge&quot;&gt;mosh&lt;/code&gt; you can connect to the server as follows:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mosh lgallard@192.168.1.65
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The change seems simple and with this we now are able to close our iPad or the computer where we are using the &lt;code class=&quot;highlighter-rouge&quot;&gt;mosh&lt;/code&gt; client and be able to magically recover the work session when we reconnect.&lt;/p&gt;

&lt;p&gt;You can configure  &lt;strong&gt;Blink Shell&lt;/strong&gt; options by accessing a configuration wizard to have different hosts and ease the connection with a name instead of an IP address. To access this wizard simply type &lt;code class=&quot;highlighter-rouge&quot;&gt;config&lt;/code&gt; from the terminal:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Blink_config.png&quot; alt=&quot;Blink config&quot; style=&quot;display:block; margin-left:auto; margin-right:auto&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In my case now I can connect to my workstation as follows:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mosh dauntless
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;mosh-the-bad&quot;&gt;Mosh, the bad&lt;/h2&gt;

&lt;p&gt;As a con &lt;code class=&quot;highlighter-rouge&quot;&gt;mosh&lt;/code&gt; can‚Äôt scroll the terminal, that is, if you need to check the output of commands that you have previously executed and are no longer on the screen, you won‚Äôt be able to see them. For me, this was a big problem because when using &lt;code class=&quot;highlighter-rouge&quot;&gt;terraform&lt;/code&gt; I lost the plans with the changes to be applied.&lt;/p&gt;

&lt;p&gt;This is the way &lt;code class=&quot;highlighter-rouge&quot;&gt;mosh&lt;/code&gt; works, to have optimal performance they render the text. There‚Äôs an &lt;a href=&quot;https://github.com/mobile-shell/mosh/issues/122&quot; target=&quot;_blank&quot;&gt;open issue&lt;/a&gt; since several years where the developers commented they left it opened as a reference but  they have no intention of implementing it. So, is there  no solution? Yes, &lt;code class=&quot;highlighter-rouge&quot;&gt;tmux&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&quot;what-is-tmux&quot;&gt;What is tmux?&lt;/h1&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;tmux&lt;/code&gt; is a tool that allows you to have several terminals open (or windows) to be accessed and controlled from a single terminal as we would do with &lt;code class=&quot;highlighter-rouge&quot;&gt;screen&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You have to install &lt;code class=&quot;highlighter-rouge&quot;&gt;tmux&lt;/code&gt; on the computer where we want to log in and once installed it‚Äôs enough to run this from the &lt;code class=&quot;highlighter-rouge&quot;&gt;mosh&lt;/code&gt; client (the iPad Pro in my case):&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mosh danuntless -- tmux new  -s terminal-1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This way we can create a new session whose name is &lt;strong&gt;terminal-1&lt;/strong&gt;. Then to access this session later you have to run the following:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mosh danuntless -- tmux a  -t terminal-1&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;enabling--scrolling-on-tmux&quot;&gt;Enabling  scrolling on tmux&lt;/h2&gt;

&lt;p&gt;On the remote workstation you must configure &lt;code class=&quot;highlighter-rouge&quot;&gt;mosh&lt;/code&gt; to have scrolling enabled using &lt;code class=&quot;highlighter-rouge&quot;&gt;tmux&lt;/code&gt;, to achieve this edit the  &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.tmux.conf&lt;/code&gt; file with this content:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;new-session
set -g history-limit 30000
set -g mouse on
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;blink--ssh---mosh--tmux--eh&quot;&gt;Blink + ssh  + mosh + tmux ‚Ä¶ eh?&lt;/h2&gt;

&lt;p&gt;‚ÄúWait a moment ‚Ä¶ &lt;strong&gt;Blink + ssh + mosh + tmux&lt;/strong&gt;, Are all these too complicated? Isn‚Äôt it better to use &lt;code class=&quot;highlighter-rouge&quot;&gt;ssh&lt;/code&gt; with &lt;code class=&quot;highlighter-rouge&quot;&gt;screen&lt;/code&gt;? ‚Äú. Yes, it‚Äôs an alternative, but with &lt;code class=&quot;highlighter-rouge&quot;&gt;ssh&lt;/code&gt; you would not be able to reconnect automatically and you will have to log in again if you close the iPad or if your IP address changes for some reason (for example,  if you change  your connection from WiFI to cell phone) or if the &lt;code class=&quot;highlighter-rouge&quot;&gt;ssh&lt;/code&gt; session expires.&lt;/p&gt;

&lt;p&gt;I have to admit there‚Äôs a learning curve to cover with &lt;code class=&quot;highlighter-rouge&quot;&gt;tmux&lt;/code&gt; but once passed you will love it and wonder why you didn‚Äôt use &lt;code class=&quot;highlighter-rouge&quot;&gt;mosh&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;tmux&lt;/code&gt; before.&lt;/p&gt;

&lt;h2 id=&quot;more-about-tmux&quot;&gt;More about tmux&lt;/h2&gt;

&lt;p&gt;If you want to learn how to use &lt;code class=&quot;highlighter-rouge&quot;&gt;tmux&lt;/code&gt; I leave you a &lt;a href=&quot;https://tmuxcheatsheet.com&quot; target=&quot;_blank&quot;&gt;cheat sheet&lt;/a&gt; with the commands you can use. In my case, I found the panels division and the use of zooming between them very useful, but I must admit that copying text between panels is somewhat complicated on the iPad and sometimes I prefer to use &lt;code class=&quot;highlighter-rouge&quot;&gt;vim&lt;/code&gt; for this, but I will surely find a workaround.&lt;/p&gt;

&lt;h1 id=&quot;final-words&quot;&gt;Final words&lt;/h1&gt;

&lt;p&gt;Here I comment my experiences with the iPad Pro, but all these can be replicated on an iPad Air and even use &lt;code class=&quot;highlighter-rouge&quot;&gt;mosh&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;tmux&lt;/code&gt; from other workstations with Linux or Windows.&lt;/p&gt;

&lt;h1 id=&quot;references&quot;&gt;References&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://youtu.be/LrLDKYFyLMM&quot; target=&quot;_blank&quot;&gt;Run ANY OS on iPad or iPhone! - YouTube&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://arslan.io/2019/01/07/using-the-ipad-pro-as-my-development-machine/&quot; target=&quot;_blank&quot;&gt;Using the iPad Pro as my development machine&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blink.sh&quot; target=&quot;_blank&quot;&gt;Blink Shell&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blink.sh&quot; target=&quot;_blank&quot;&gt;Mosh&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://tmuxcheatsheet.com&quot;&gt;Tmux cheat sheet&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/mobile-shell/mosh/issues/122&quot; target=&quot;_blank&quot;&gt;mosh prevents the use of scrollback&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Luis Gallardo</name></author><category term="General" /><summary type="html">It's been a while since I posted on the blog, first because I couldn't find something interesting to share and second because there wasn't much spare ...</summary></entry><entry><title type="html">Helm 3 local repo</title><link href="https://lgallardo.com/2021/06/15/helm-local-repo/" rel="alternate" type="text/html" title="Helm 3 local repo" /><published>2021-06-14T19:00:00-05:00</published><updated>2021-06-14T19:00:00-05:00</updated><id>https://lgallardo.com/2021/06/15/helm3-local-repo</id><content type="html" xml:base="https://lgallardo.com/2021/06/15/helm-local-repo/">&lt;p&gt;&lt;img src=&quot;/assets/images/helm.jpg&quot; alt=&quot;Helm 3 local repo&quot; style=&quot;display:block; margin-left:auto; margin-right:auto&quot; /&gt;
In Helm 3 the support of &lt;strong&gt;helm serve&lt;/strong&gt; command was removed due to some design issues, therefore if you need a similar tool you have to install  &lt;strong&gt;helm servecm&lt;/strong&gt;  plugin, which uses &lt;strong&gt;ChartMuseum&lt;/strong&gt; for publishing the charts to your local storage (other storages are also supported, like S3 buckets).&lt;/p&gt;

&lt;p&gt;In this post you will learn how to install and publish a local repo in Helm 3.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Install &lt;strong&gt;ChartMuseum&lt;/strong&gt;&lt;br /&gt;
First off, you need to install &lt;strong&gt;ChartMuseum&lt;/strong&gt;. At the project page you will find different ways  of installing it, but I install as a Go app as follows:&lt;br /&gt;&lt;br /&gt;
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;GO111MODULE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;on&quot;&lt;/span&gt; go get github.com/helm/chartmuseum@v0.13.1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Install &lt;strong&gt;helm servecm plugin&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;

    &lt;p&gt;&lt;br /&gt;Then you need to install &lt;strong&gt;servecm&lt;/strong&gt; as a helm plugin:&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;helm plugin install https://github.com/jdolitsky/helm-servecm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Install &lt;strong&gt;helm push plugin&lt;/strong&gt;&lt;br /&gt;
In order to host your charts, you will be using &lt;strong&gt;ChartMuseum&lt;/strong&gt; and &lt;strong&gt;helm servecm&lt;/strong&gt; pluing, but you will still need to publish them into &lt;strong&gt;ChartMuseum&lt;/strong&gt;. You can do it manually or use another plugin called &lt;strong&gt;helm push&lt;/strong&gt; which does it for you:&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;helm plugin install https://github.com/chartmuseum/helm-push.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Add the local repo in helm:&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;helm repo add local http://127.0.0.1:8879/charts
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Run &lt;strong&gt;helm servecm plugin&lt;/strong&gt;:&lt;/p&gt;

    &lt;p&gt;&lt;br /&gt;Next step is to run &lt;strong&gt;helm servecm&lt;/strong&gt; plugin:&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;helm servecm &lt;span class=&quot;nt&quot;&gt;--port&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;8879 &lt;span class=&quot;nt&quot;&gt;--storage&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--storage-local-rootdir&lt;/span&gt; ./local &lt;span class=&quot;nt&quot;&gt;--context-path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/charts 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;Now you can publish your charts at http://127.0.0.1:8879/charts&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Publish your chart to your local repo:&lt;/p&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;helm push your-chart &lt;span class=&quot;nb&quot;&gt;local&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;At this point you will be able to use you local charts in your cluster by executing:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;helm install  your-chart
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://helm.sh/docs/faq/#removal-of-helm-serve&quot; target=&quot;_blank&quot;&gt;Removal of helm serve&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/jdolitsky/helm-servecm&quot; target=&quot;_blank&quot;&gt;helm servecm plugin&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/helm/chartmuseum&quot; target=&quot;_blank&quot;&gt;ChartMuseum&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/chartmuseum/helm-push&quot; target=&quot;_blank&quot;&gt;helm push plugin&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Luis Gallardo</name></author><category term="General" /><summary type="html">In Helm 3 the support of helm serve command was removed due to some design issues, therefore if you need a similar tool you have to install helm serv...</summary></entry><entry><title type="html">Terraform module for AWS ECR</title><link href="https://lgallardo.com/2021/04/15/terraform-module-for-aws-ecr" rel="alternate" type="text/html" title="Terraform module for AWS ECR" /><published>2021-04-15T00:00:00-05:00</published><updated>2021-04-15T00:00:00-05:00</updated><id>https://lgallardo.com/2021/04/15/terraform-module-for-aws-ecr</id><content type="html" xml:base="https://lgallardo.com/2021/04/15/terraform-module-for-aws-ecr">&lt;center&gt;&lt;img src=&quot;/images/terraform-aws-ecr.jpg&quot; alt=&quot;Terraform&quot; /&gt;&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;
I share here another Terraform module I published as open source code, which allows you to create registries in AWS ECR.&lt;/p&gt;

&lt;p&gt;You can check my module &lt;strong&gt;terraform-aws-ecr&lt;/strong&gt; at the &lt;a href=&quot;https://registry.terraform.io/modules/lgallard/ecr/aws&quot; target=&quot;_blank&quot;&gt;Terraform Registry&lt;/a&gt; or clone it from &lt;a href=&quot;https://github.com/lgallard/terraform-aws-ecr.git&quot; target=&quot;_blank&quot;&gt;Github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you want to take a sneak of the module, I also left the README in this post:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lgallardo.com/images/terraform.jpg&quot; alt=&quot;Terraform&quot; target=&quot;_blank&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;terraform-aws-ecr&quot;&gt;terraform-aws-ecr&lt;/h1&gt;
&lt;p&gt;Terraform module to create &lt;a href=&quot;https://aws.amazon.com/ecr/&quot; target=&quot;_blank&quot;&gt;AWS ECR&lt;/a&gt; (Elastic Container Registry) which is a fully-managed Docker container registry.&lt;/p&gt;

&lt;h2 id=&quot;usage&quot;&gt;Usage&lt;/h2&gt;
&lt;p&gt;You can use this module to create an ECR registry using few parameters (simple example) or define in detail every aspect of the registry (complete example).&lt;/p&gt;

&lt;p&gt;Check the &lt;a href=&quot;https://github.com/lgallard/terraform-aws-ecr/tree/master/examples&quot; target=&quot;_blank&quot;&gt;examples&lt;/a&gt; for the  &lt;strong&gt;simple&lt;/strong&gt; and the &lt;strong&gt;complete&lt;/strong&gt; snippets.&lt;/p&gt;

&lt;h3 id=&quot;simple-example&quot;&gt;Simple example&lt;/h3&gt;
&lt;p&gt;This example creates an ECR registry using few parameters&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;module &quot;ecr&quot; {

  source = &quot;lgallard/ecr/aws&quot;

  name         = &quot;ecr-repo-dev&quot;

  # Tags
  tags = {
    Owner       = &quot;DevOps team&quot;
    Environment = &quot;dev&quot;
    Terraform   = true
  }

}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;complete-example&quot;&gt;Complete example&lt;/h3&gt;
&lt;p&gt;In this example the register is defined in detailed.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;module &quot;ecr&quot; {

  source = &quot;lgallard/ecr/aws&quot;

  name                 = &quot;ecr-repo-dev&quot;
  scan_on_push         = true
  timeouts_delete      = &quot;60m&quot;
  image_tag_mutability = &quot;MUTABLE&quot;


  # Note that currently only one policy may be applied to a repository.
  policy = &amp;lt;&amp;lt;EOF
{
    &quot;Version&quot;: &quot;2008-10-17&quot;,
    &quot;Statement&quot;: [
        {
            &quot;Sid&quot;: &quot;repo policy&quot;,
            &quot;Effect&quot;: &quot;Allow&quot;,
            &quot;Principal&quot;: &quot;*&quot;,
            &quot;Action&quot;: [
                &quot;ecr:GetDownloadUrlForLayer&quot;,
                &quot;ecr:BatchGetImage&quot;,
                &quot;ecr:BatchCheckLayerAvailability&quot;,
                &quot;ecr:PutImage&quot;,
                &quot;ecr:InitiateLayerUpload&quot;,
                &quot;ecr:UploadLayerPart&quot;,
                &quot;ecr:CompleteLayerUpload&quot;,
                &quot;ecr:DescribeRepositories&quot;,
                &quot;ecr:GetRepositoryPolicy&quot;,
                &quot;ecr:ListImages&quot;,
                &quot;ecr:DeleteRepository&quot;,
                &quot;ecr:BatchDeleteImage&quot;,
                &quot;ecr:SetRepositoryPolicy&quot;,
                &quot;ecr:DeleteRepositoryPolicy&quot;
            ]
        }
    ]
}
EOF

  # Only one lifecycle policy can be used per repository.
  # To apply multiple rules, combined them in one policy JSON.
  lifecycle_policy = &amp;lt;&amp;lt;EOF
{
    &quot;rules&quot;: [
        {
            &quot;rulePriority&quot;: 1,
            &quot;description&quot;: &quot;Expire untagged images older than 14 days&quot;,
            &quot;selection&quot;: {
                &quot;tagStatus&quot;: &quot;untagged&quot;,
                &quot;countType&quot;: &quot;sinceImagePushed&quot;,
                &quot;countUnit&quot;: &quot;days&quot;,
                &quot;countNumber&quot;: 14
            },
            &quot;action&quot;: {
                &quot;type&quot;: &quot;expire&quot;
            }
        },
        {
            &quot;rulePriority&quot;: 2,
            &quot;description&quot;: &quot;Keep last 30 dev images&quot;,
            &quot;selection&quot;: {
                &quot;tagStatus&quot;: &quot;tagged&quot;,
                &quot;tagPrefixList&quot;: [&quot;dev&quot;],
                &quot;countType&quot;: &quot;imageCountMoreThan&quot;,
                &quot;countNumber&quot;: 30
            },
            &quot;action&quot;: {
                &quot;type&quot;: &quot;expire&quot;
            }
        }
    ]
}
EOF

  # Tags
  tags = {
    Owner       = &quot;DevOps team&quot;
    Environment = &quot;dev&quot;
    Terraform   = true
  }

}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;providers&quot;&gt;Providers&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Name&lt;/th&gt;
      &lt;th&gt;Version&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;aws&lt;/td&gt;
      &lt;td&gt;n/a&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;inputs&quot;&gt;Inputs&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Name&lt;/th&gt;
      &lt;th&gt;Description&lt;/th&gt;
      &lt;th&gt;Type&lt;/th&gt;
      &lt;th&gt;Default&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Required&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;encryption_type&lt;/td&gt;
      &lt;td&gt;The encryption type to use for the repository. Valid values are &lt;code class=&quot;highlighter-rouge&quot;&gt;AES256&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;KMS&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;string&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;AES256&quot;&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;no&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;image_scanning_configuration&lt;/td&gt;
      &lt;td&gt;Configuration block that defines image scanning configuration for the repository. By default, image scanning must be manually triggered. See the ECR User Guide for more information about image scanning.&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;map&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;{}&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;no&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;image_tag_mutability&lt;/td&gt;
      &lt;td&gt;The tag mutability setting for the repository. Must be one of: &lt;code class=&quot;highlighter-rouge&quot;&gt;MUTABLE&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;IMMUTABLE&lt;/code&gt;.&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;string&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;MUTABLE&quot;&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;no&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;kms_key&lt;/td&gt;
      &lt;td&gt;The ARN of the KMS key to use when encryption_type is &lt;code class=&quot;highlighter-rouge&quot;&gt;KMS&lt;/code&gt;. If not specified when encryption_type is &lt;code class=&quot;highlighter-rouge&quot;&gt;KMS&lt;/code&gt;, uses a new KMS key. Otherwise, uses the default AWS managed key for ECR.&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;string&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;n/a&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;no&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;lifecycle_policy&lt;/td&gt;
      &lt;td&gt;Manages the ECR repository lifecycle policy&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;string&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;n/a&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;yes&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;name&lt;/td&gt;
      &lt;td&gt;Name of the repository.&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;string&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;n/a&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;yes&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;policy&lt;/td&gt;
      &lt;td&gt;Manages the ECR repository policy&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;string&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;n/a&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;yes&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;scan_on_push&lt;/td&gt;
      &lt;td&gt;Indicates whether images are scanned after being pushed to the repository (true) or not scanned (false).&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bool&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;no&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;tags&lt;/td&gt;
      &lt;td&gt;A mapping of tags to assign to the resource.&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;map(string)&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;{}&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;no&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;timeouts&lt;/td&gt;
      &lt;td&gt;Timeouts map.&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;map&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;{}&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;no&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;timeouts_delete&lt;/td&gt;
      &lt;td&gt;How long to wait for a repository to be deleted.&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;string&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;n/a&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;no&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;outputs&quot;&gt;Outputs&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Name&lt;/th&gt;
      &lt;th&gt;Description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;arn&lt;/td&gt;
      &lt;td&gt;Full ARN of the repository&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;name&lt;/td&gt;
      &lt;td&gt;The name of the repository.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;registry_id&lt;/td&gt;
      &lt;td&gt;The registry ID where the repository was created.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;repository_url&lt;/td&gt;
      &lt;td&gt;The URL of the repository (in the form &lt;code class=&quot;highlighter-rouge&quot;&gt;aws_account_id.dkr.ecr.region.amazonaws.com/repositoryName&lt;/code&gt;)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lgallard/terraform-aws-ecr.git&quot; target=&quot;_blank&quot;&gt;terraform-aws-ecr module at Github&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://registry.terraform.io/modules/lgallard/ecr/aws&quot; target=&quot;_blank&quot;&gt;terraform-aws-ecr module at Terraform Registry&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Luis Gallardo</name></author><category term="General" /><summary type="html">I share here another Terraform module I published as open source code, which allows you to create registries in AWS ECR.</summary></entry></feed>